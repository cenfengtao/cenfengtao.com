<?php
/**
 * 投票
 */
namespace Home\Controller;

use Think\Controller;
use Think\Exception;
use Think\Upload;

class VoteController extends BaseController
{
    //投票活动列表
    public function voteActivityList()
    {
        $this->display();
    }

    public function ajaxVoteActivityList()
    {
        $list = D('Vote')->getList(array('check_status' => 2), 'id,upload_type,image,title');
        foreach ($list as $k => $v) {
            $status[$k] = M('vote')->where(array('id' => $v['id'], 'vote_end_time' => array('ELT', time())))->getField('id');
            if (!$status[$k]) {
                //活动结束
                $list[$k]['underway'] = 1;
            } else {
                //活动进行中
                $list[$k]['underway'] = 2;
            }
        }
        return show(1, '', $list);
    }

    //作品列表
    public function voteList()
    {
        $this->display();
    }

    public function ajaxVoteList()
    {
        if (!$_GET['vote_id']) {
            return show(0, 'ID不能为空');
        }
        $vote = D('Vote')->find($_GET['vote_id']);
        if (!$vote) {
            return show(0, '没有此活动，请返回活动页面刷新下吧');
        }
        if ($vote['check_status'] == 1) {
            return show(0, '活动正在审核中，请耐心等待');
        }
        //status 1-投稿中 2-截止投稿 3-投票中 4-截止投票 5-发布结果 6-结束
        if ($vote['status'] == 4 || $vote['status'] == 5 || $vote['status'] == 6) {
            //$voteStatus 1-活动结束 2-活动中
            $voteStatus = 1;
        } else {
            $voteStatus = 2;
        }
        //1-截止投稿 2-投稿中
        if ($vote['work_start_time'] <= time() && $vote['work_end_time'] >= time()) {
            $isContribute = 2;
        } else {
            $isContribute = 1;
        }
        //每次增加一次浏览记录
        M('vote')->where('id=' . $_GET['vote_id'])->setInc('visit_sum');
        //是否有获得每日票数
        $isGet = D('VoteRecord')->everydayCount($this->user['id']);
        if ($isGet == 1) {
            $countData = [
                'create_time' => time(),
                'user_id' => $this->user['id'],
                'type' => 1,
                'type_id' => $_GET['share_user_id'],
                'count' => 2,
                'is_expend' => 2
            ];
            D('VoteRecord')->insert($countData);
        }
        //status 1-审核中 2-已入围 3-落选
        $joinUser = D('ContributionRecord')->getList(array('vote_id' => $_GET['vote_id'], 'status' => 2,
            'create_time' => array('ELT', $vote['vote_end_time'])), 'id,type,path,username,title,vote_count');
        //投票总数
        $voteSum = M('contribution_record')->where(array('vote_id' => $_GET['vote_id'], 'status' => 2,
            'create_time' => array('ELT', $vote['vote_end_time'])))->sum('vote_count');
        if (!$voteSum) {
            $voteSum = 0;
        }
        //参加人数
        $joinSum = count($joinUser);
        //浏览数
        $visitSum = $vote['visit_sum'];
        $data = [
            'joinUser' => $joinUser,
            'joinSum' => $joinSum,
            'voteSum' => $voteSum,
            'visitSum' => $visitSum,
            'voteStatus' => $voteStatus,
            'upload_type' => $vote['upload_type'],
            'isContribute' => $isContribute,
            'background' => $vote['image']
        ];
        return show(1, '', $data);
    }

    public function voteDetail()
    {
        $this->display();
    }

    public function ajaxVoteDetail()
    {
        try {
            if (!$_GET['id']) {
                return show(0, 'ID不能为空');
            }
            $work = M('contribution_record')->where(['id' => $_GET['id'], 'status' => 2])->field('id,path,username,title,vote_id,vote_count')->find();
            if (!$work) {
                return show(0, '没有此作品，请返回活动页面刷新下吧');
            }
            $vote = M('Vote')->where(['id' => $work['vote_id'], 'check_status' => 2])->find();
            //1-截止投稿 2-投稿中
            if ($vote['work_start_time'] <= time() && $vote['work_end_time'] >= time()) {
                $isContribute = 2;
            } else {
                $isContribute = 1;
            }
            //每次增加一次浏览记录
            M('vote')->where('id=' . $vote['id'])->setInc('visit_sum');
            //是否有获得每日票数
            $isGet = D('VoteRecord')->everydayCount($this->user['id']);
            if ($isGet == 1) {
                $countData = [
                    'create_time' => time(),
                    'user_id' => $this->user['id'],
                    'type' => 1,
                    'type_id' => $_GET['share_user_id'],
                    'count' => 2,
                    'is_expend' => 2
                ];
                D('VoteRecord')->insert($countData);
            }
            //获取可投票数
            $quotaWhere = [
                'create_time' => ['elt', time()],
                'end_time' => ['gt', time()],
                'user_id' => $this->user['id'],
            ];
            $count = M('vote_quota')->where($quotaWhere)->sum('remain_count');
            //判断每日投票数
            $todayTime = strtotime(date("Y-m-d", time()));
            $todayQuota = M('vote_record')->where(['type' => 3, 'create_time' => ['egt', $todayTime], 'user_id' =>
                $this->user['id']])->sum('count');
            $todayQuota = 2 - $todayQuota >= 0 ? 2 - $todayQuota : 0;
            $count = $count + $todayQuota;
            //更多作品
            $contributions = M('contribution_record')->where(['vote_id' => $vote['id'], 'id' => array('NEQ', $work['id']), 'status' => 2])->limit(0, 2)->select();
            $data = [
                'work' => $work,
                'more' => $contributions,
                'upload_type' => $vote['upload_type'],
                'desc' => $vote['description'],
                'isContribute' => $isContribute,
                'userCount' => $count
            ];
            return show(1, '', $data);
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    public function contribution()
    {
        $this->display();
    }

    //投稿
    public function ajaxContribution()
    {
        if (!$_POST['vote_id']) {
            return show(0, '投票ID参数错误');
        }
        //判断是否已投稿
        $isContribution = M('contribution_record')->where(['vote_id' => $_POST['vote_id'], 'user_id' => $this->user['id']])->getField('id');
        $vote = D('Vote')->find($_POST['vote_id']);
        if (!$isContribution) {
            if (!$_POST['title']) {
                return show(0, '请填写你的作品名称');
            }
            if (!$_POST['username']) {
                return show(0, '参赛人不能为空');
            }
            if (!$_POST['mobile']) {
                return show(0, '联系手机不能为空');
            }
            if (!$_POST['path']) {
                return show(0, '作品不能为空');
            }
            $data = [
                'create_time' => time(),
                'user_id' => $this->user['id'],
                'type' => $vote['upload_type'],
                'vote_id' => $vote['id'],
                'path' => $_POST['path'],
                'title' => $_POST['title'],
                'username' => $_POST['username'],
                'mobile' => $_POST['mobile']
            ];
            $id = D('ContributionRecord')->insert($data);
            if ($id) {
                return show(1, '投稿成功,请等待审核通过吧！');
            } else {
                return show(0, '投稿失败，请稍候再试');
            }
        } else {
            if (!$_POST['path']) {
                $data = [
                    'create_time' => time(),
                    'title' => $_POST['title'],
                    'username' => $_POST['username'],
                    'mobile' => $_POST['mobile'],
                    'status' => 1,
                    'template_status' => 1
                ];
            } else {
                $path = M('contribution_record')->where(['vote_id' => $_POST['vote_id'], 'user_id' => $this->user['id']])->getField('path');
                //删除视频和图片
                unlink(dirname(__FILE__) . '/../../..' . $path);
                $data = [
                    'path' => $_POST['path'],
                    'create_time' => time(),
                    'title' => $_POST['title'],
                    'username' => $_POST['username'],
                    'mobile' => $_POST['mobile'],
                    'status' => 1,
                    'template_status' => 1
                ];
            }
            return $this->contributionAgain($isContribution, $data);
        }
    }

    public function contributionAgain($recordId, $data)
    {
        try {
            $id = D('ContributionRecord')->updateById($recordId, $data);
            if ($id === false) {
                return show(0, '重新投稿失败');
            }
            return show(1, '重新投稿成功,请等待审核通过吧！');
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    //投票
    public function toVote()
    {
        if (!$_POST['id']) {
            return show(0, '参数错误');
        }
        if (!$_POST['count'] || $_POST['count'] < 0) {
            return show(0, '投票数不正确');
        }
        try {
            $work = M('contribution_record')->where(array('id' => $_POST['id'], 'status' => 2))->getField('vote_id');
            $vote = M('vote')->where(array('id' => $work, 'work_start_time' => array('ELT', time()),
                'vote_end_time' => array('EGT', time()), 'check_status' => 2))->getField('id');
            if (!$vote) {
                return show(0, '活动已过期，请去正在进行的活动投票吧');
            }
            $voteCount = $_POST['count'];
            //获取可投票数
            $quotaWhere = [
                'create_time' => ['elt', time()],
                'end_time' => ['gt', time()],
                'user_id' => $this->user['id'],
            ];
            $count = M('vote_quota')->where($quotaWhere)->sum('remain_count');
            //判断每日投票数
            $todayTime = strtotime(date("Y-m-d", time()));
            $todayQuota = M('vote_record')->where(['type' => 3, 'create_time' => ['egt', $todayTime], 'user_id' =>
                $this->user['id']])->sum('count');
            $todayQuota = 2 - $todayQuota >= 0 ? 2 - $todayQuota : 0;
            $count = $count + $todayQuota;
            if ($_POST['count'] > $count) {
                return show(0, '你的票数不足哦！每天登录平台可获得2张免费票，在平台购物可获大量票数哦！');
            }
            //先扣除每日投票数
            if ($todayQuota > 0) {
                $insertCount = $voteCount - $todayQuota <= 0 ? $voteCount : $todayQuota;
                $insertData = [
                    'create_time' => time(),
                    'user_id' => $this->user['id'],
                    'type' => 3,
                    'type_id' => $_POST['id'],
                    'count' => $insertCount,
                    'is_expend' => 1,
                ];
                D('VoteRecord')->insert($insertData);
                M('contribution_record')->where(['id' => $_POST['id']])->setInc('vote_count', $insertCount);
            }
            if ($voteCount - $todayQuota <= 0) {
                return show(1, '投票成功');
            } else {
                //超过每日免费票数
                $voteCount -= $todayQuota;
                $voteQuatos = M('vote_quota')->where($quotaWhere)->order('end_time asc')->select();
                foreach ($voteQuatos as $key => $val) {
                    $insertCount = $voteCount - $val['remain_count'] <= 0 ? $voteCount : $val['remain_count'];
                    $voteCount -= $insertCount;
                    $insertData = [
                        'create_time' => time(),
                        'user_id' => $this->user['id'],
                        'type' => 4,
                        'type_id' => $_POST['id'],
                        'count' => $insertCount,
                        'is_expend' => 1,
                    ];
                    D('VoteRecord')->insert($insertData);
                    M('vote_quota')->where(['id' => $val['id']])->setDec('remain_count', $insertCount);
                    M('contribution_record')->where(['id' => $_POST['id']])->setInc('vote_count', $insertCount);
                    if ($voteCount <= 0) {
                        return show(1, '投票成功');
                    }
                }
                return show(1, '投票成功');
            }
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    //查看票数
    public function lookVoteCount()
    {
        $where = [
            'create_time' => ['elt', time()],
            'end_time' => ['gt', time()],
            'user_id' => $this->user['id'],
        ];
        $count = M('vote_quota')->where($where)->sum('remain_count');
        //判断每日投票数
        $todayTime = strtotime(date("Y-m-d", time()));
        $todayQuota = M('vote_record')->where(['type' => 3, 'create_time' => ['egt' => $todayTime], 'user_id' =>
            $this->user['id']])->sum('count');
        $todayQuota = 2 - $todayQuota >= 0 ? 2 - $todayQuota : 0;
        $count = $count + $todayQuota;
        return show(1, '获取成功', ['count' => $count]);
    }

    //查看用户作品分享
    public function userContribution()
    {
        $this->display();
    }

    //作品详情
    public function voteContribution()
    {
        if (!$_GET['id']) {
            return show(0, '参数错误');
        }
        $contribution = D('ContributionRecord')->find($_GET['id']);
        $vote = D('Vote')->find($contribution['vote_id']);
        if ($vote['upload_type'] == 1) {
            $image = $contribution['path'];
        } else {
            $image = $vote['image'];
        }
        $username = D('User')->getNameById($contribution['user_id']);
        //设置默认分享信息
        $shareData = [
            'share_title' => '【优培·投票】' . '我是' . $username . ',正在参加' . $vote['title'],
            'share_desc' => "你的好友" . $username . "邀请你帮Ta投票",
            'share_url' => 'http://' . $_SERVER['HTTP_HOST'] . '/index.php/Vote/voteDetail.html?id=' . $_GET['id'] .
                '&vote_id=' . $contribution['vote_id'] . '&share_user_id=' . $this->user['id'] . '&token=' . $this->token,
            'share_img' => 'http://' . $_SERVER['HTTP_HOST'] . $image,
        ];
        return show(1, '获取成功', $shareData);
    }

    //投票作品列表
    public function voteListContribution()
    {
        if (!$_GET['vote_id']) {
            return show(0, '参数错误');
        }
        $vote = D('Vote')->find($_GET['vote_id']);
        //设置默认分享信息
        $shareData = [
            'share_title' => '【优培·投票】' . $vote['title'],
            'share_desc' => "快来参与投票吧！",
            'share_url' => 'http://' . $_SERVER['HTTP_HOST'] . '/index.php/Vote/voteList?vote_id=' . $_GET['vote_id'] .
                '&share_user_id=' . $this->user['id'] . '&token=' . $this->token,
            'share_img' => 'http://' . $_SERVER['HTTP_HOST'] . $vote['image'],
        ];
        return show(1, '获取成功', $shareData);
    }

    //投票列表
    public function voteActivityListContribution()
    {
        echo 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    }

    public function uploadType()
    {
        if (!$_GET['vote_id']) {
            return show(0, 'ID不能为空');
        }
        //1-图片 2-视频
        $type = M('vote')->where(array('id' => $_GET['vote_id']))->getField('upload_type');
        if (!$type) {
            return show(0, '该活动不存在');
        }
        $userUpload = D('ContributionRecord')->uploadStatus($_GET['vote_id'], $this->user['id']);
        //1-未投稿 2-已投稿
        if (!$userUpload) {
            $userUpload['upload_status'] = 1;
        } else {
            $userUpload['upload_status'] = 2;
        }
        $data = [
            'type' => $type,
            'userUpload' => $userUpload
        ];
        return show(1, '获取类型成功', $data);
    }

    public function userWorks()
    {
        $this->display();
    }

    public function ajaxUserWorks()
    {
        $list = M('contribution_record')->where(array('user_id' => $this->user['id'], 'status' => 2))->
        field('id,create_time,path,title,vote_count,vote_id')->select();
        $workList = [];
        foreach ($list as $k => $v) {
            $vote[$k] = M('vote')->where(array('id' => $v['vote_id']))->field('id,upload_type')->find();
            if ($vote[$k]) {
                $workList[$k] = $list[$k];
                $workList[$k]['time'] = date('Y-m-d', $list[$k]['create_time']);
                $workList[$k]['upload_type'] = $vote[$k]['upload_type'];
            }
        }
        return show(1, '', $workList);
    }

    public function userVote()
    {
        $this->display();
    }

    public function ajaxUserVote()
    {
        $list = M('vote_record')->where(array('type' => array(array('EQ', 3), array('EQ', 4), 'or'),
            'user_id' => $this->user['id']))->distinct(true)->field('type_id')->select();
        $workList = [];
        foreach ($list as $k => $v) {
            $workList[$k] = M('contribution_record')->where(array('id' => $v['type_id']))->field('id,path,title,username,vote_id,vote_count')->find();
            $workList[$k]['time'] = date('Y-m-d', $workList[$k]['create_time']);
            $vote[$k] = M('vote')->where(array('id' => $workList[$k]['vote_id']))->field('id,upload_type')->find();
            $workList[$k]['upload_type'] = $vote[$k]['upload_type'];
            if (!$vote[$k]) {
                unset($workList[$k]);
            }
        }
        return show(1, '', $workList);
    }

    public function userBillboard()
    {
        $this->display();
    }

    public function ajaxUserBillboard()
    {
        if (!$_GET['vote_id']) {
            return show(0, 'ID不能为空');
        }
        $vote = D('Vote')->find($_GET['vote_id']);
        //投票数倒叙排序
        $list = M('contribution_record')->where(array('vote_id' => $vote['id'], 'status' => 2))
            ->order('vote_count desc ,create_time asc')->field('id,path,username,user_id,title,vote_count,vote_id')->select();
        $count = [];
        foreach ($list as $key => $val) {
            $list[$key]['user_img'] = D('User')->getHeadById($val['user_id']);
            $count[$key] = $val['vote_count'];
        }
        //给当前排序排名
        $arr1 = $count;
        rsort($arr1);
        $c = [];
        foreach ($count as $v) {
            $b = array_search($v, $arr1);
            $c[] = $b + 1;
        }
        foreach ($c as $j => $l) {
            $list[$j]['ranking'] = $l;
        }
        $data = [
            'endTime' => $vote['vote_end_time'],
            'list' => $list
        ];
        return show(1, '', $data);
    }

    public function upload()
    {
        $this->display();
    }

    public function uploadPic()
    {
        $config = array(
            'maxSize' => 12582912, //上传的文件大小限制 (0-不做限制)
            'exts' => array('jpg', 'png', 'gif', 'jpeg', 'mp4'), //允许上传的文件后缀
            'rootPath' => './Upload/', //保存根路径
            'driver' => 'LOCAL', // 文件上传驱动
            'subName' => array('date', 'Y-m-d'),
            'savePath' => I('dir', 'uploads') . "/"
        );
        $dirs = explode(",", C("YP_UPLOAD_DIR"));
        if (!file_exists($dirs)) {
            //检查是否有该文件夹，如果没有就创建，并给予最高权限
            mkdir($dirs, 0777, true);
        }
        $upload = new \Think\Upload($config);
        $rs = $upload->upload($_FILES);
        $Filedata = key($_FILES);
        $type = explode("/", $_FILES['file']['type']);
        if (!$rs) {
            $this->ajaxReturn(['status' => 0, 'message' => $upload->getError()], 'JSON');
        } else {
            $uploadType = I('upload_type', 'uploads');
            if ($uploadType == 1 && $type[0] != 'image') {
                $this->ajaxReturn(['status' => 0, 'message' => '请上传图片'], 'JSON');
            } elseif ($uploadType == 2 && $type[0] != 'video') {
                $this->ajaxReturn(['status' => 0, 'message' => '请上传视频'], 'JSON');
            }
            if ($type[0] == 'image') {
                $images = new \Think\Image();
                $images->open('./Upload/' . $rs[$Filedata]['savepath'] . $rs[$Filedata]['savename']);
                $newsavename = str_replace('.', '_thumb.', $rs[$Filedata]['savename']);
                $vv = $images->thumb(I('width', 300), I('height', 300))->save('./Upload/' . $rs[$Filedata]['savepath'] . $newsavename);
                if (C('YP_M_IMG_SUFFIX') != '') {
                    $msuffix = C('YP_M_IMG_SUFFIX');
                    $mnewsavename = str_replace('.', $msuffix . '.', $rs[$Filedata]['savename']);
                    $mnewsavename_thmb = str_replace('.', "_thumb" . $msuffix . '.', $rs[$Filedata]['savename']);
                    $images->open('./Upload/' . $rs[$Filedata]['savepath'] . $rs[$Filedata]['savename']);
                    $images->thumb(I('width', 700), I('height', 700))->save('./Upload/' . $rs[$Filedata]['savepath'] . $mnewsavename);
                    $images->thumb(I('width', 250), I('height', 250))->save('./Upload/' . $rs[$Filedata]['savepath'] . $mnewsavename_thmb);
                }
                $rs[$Filedata]['savethumbname'] = $newsavename;
            }
            $rs[$Filedata]['savepath'] = "Upload/" . $rs[$Filedata]['savepath'];
            $rs[$Filedata]['savethumbname'] = $rs[$Filedata]['savename'];
            $rs['status'] = 1;
            $this->ajaxReturn($rs, 'JSON');
        }
    }

}