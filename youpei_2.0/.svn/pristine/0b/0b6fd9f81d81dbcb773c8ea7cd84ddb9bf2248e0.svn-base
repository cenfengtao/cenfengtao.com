<?php
namespace Home\Controller;

use Think\Controller;
use Think\Exception;

require_once __DIR__ . '/../../../ThinkPHP/Library/Org/Util/JSDDK.class.php';
require_once __DIR__ . '/../../../ThinkPHP/Library/Vendor/ChuanglanSmsHelper/ChuanglanSmsApi.php';

class ProductController extends BaseController
{
    public function productDetails()
    {
        if ($_POST) {
            if (!$_POST['product_id'] || empty($_POST['product_id'])) {
                return show(0, '商品参数错误');
            }
            if (!$_POST['content'] || empty($_POST['content'])) {
                return show(0, '咨询内容不能为空');
            }
            $insertData = array(
                'product_id' => $_POST['product_id'],
                'user_id' => $this->user['id'],
                'create_time' => time(),
                'type' => 1,
                'status' => 1,
                'content' => $_POST['content'],
                'token' => $this->token,
            );
            $id = D('ProductComment')->insert($insertData);
            $list = D('ProductComment')->find($id);
            $headImg = M('user')->where("id={$list['user_id']}")->field('headimgurl')->find();
            $list['headImg'] = $headImg['headimgurl'];
            if (!$list || empty($list)) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '咨询失败'));
            }
            $this->ajaxReturn(array('status' => 1, 'msg' => '咨询成功', 'data' => $list));
        } else {
            $this->title = "课程名称";
            if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
                $this->error('获取不到该商品信息');
            }
            try {
                $product = D('Product')->find($_GET['pro_id']);
                //评论列表
                $productComment = D('ProductComment')->getCommentByFatherId(0, 0, $_GET['pro_id']);
                foreach ($productComment as $k => $v) {
                    $productComment[$k]['child'] = M('ProductComment')->where(array('type_id' => $v['id'], 'product_id' => $v['product_id'], 'status' => 1))->select();
                    $productComment[$k]['headImg'] = D('user')->getHeadById($v['user_id']);
                    foreach ($productComment[$k]['child'] as $ke => $va) {
                        //回复
                        if ($va['is_gm'] == 2) {
                            //待机构管理员完善之后需修改
                            //客服头像
                            $picture = M('organization')->field('picture')->where(array('token' => $this->token))->find();
                            $productComment[$k]['child'][$ke]['headImg'] = $picture['picture'];
                        } elseif ($va['is_gm'] == 1) {
                            $productComment[$k]['child'][$ke]['headImg'] = D('user')->getHeadById($va['user_id']);
                        }
                        //被回复
                        $userId = M('ProductComment')->where(array('id' => $productComment[$k]['child'][$ke]['father_id']))->find();
                        if ($userId['is_gm'] == 2) {
                            $pictures = M('organization')->field('picture')->where(array('token' => $userId['token']))->find();
                            $productComment[$k]['child'][$ke]['headImgs'] = $pictures['picture'];
                        } else if ($userId['is_gm'] == 1) {
                            $productComment[$k]['child'][$ke]['headImgs'] = D('user')->getHeadById($userId['user_id']);
                        }
                    }
                }
                //标签
                $tags = explode(' ', $product['tag']);
                //机构
                $organization = D('Organization')->find($product['org_id']);
                //获取ticket
                $wxuser = get_wxuser($this->token);
                $jssdk = new \JSSDK($wxuser['appid'], $wxuser['appsecret']);
                $signPackage = $jssdk->GetSignPackage();
                //分享内容图片和链接地址
                if (strpos($product['pic_url'], 'http') === false) {
                    $shareImg = 'http://' . $_SERVER["HTTP_HOST"] . $product['pic_url'];
                } else {
                    $shareImg = $product['pic_url'];
                }
                $shareUrl = 'http://' . $_SERVER["HTTP_HOST"] . U('Product/productDetails', array('share_user_id' =>
                        $this->user['id'], 'pro_id' => $_GET['pro_id'], 'token' => $this->token));
                //购买商品的所有用户头像
                $productId = $_GET['pro_id'];
                $userId = D('Order')->getGroupById($productId);
                foreach ($userId as $k => $v) {
                    $headImg[$k]['headImg'] = D('User')->getHeadById($v['user_id']);
                }
                $userCount = sizeof($userId);
                //是否收藏
                $isCollect = D('Collect')->isCollectById($this->user['id'], $_GET['pro_id'], $product['type'] == 1 ? 2 : 3);
                $price = json_decode($product['price'], true);
                if ($_GET['key']) {
                    $firstKey = $_GET['key'];
                } else {
                    $firstKey = key($price);
                }
                $product['price'] = [];
                foreach ($price as $k => $v) {
                    //判断有否抢购价
                    $rushPrice = M('bargain')->where(['type' => 2, 'type_id' => $_GET['pro_id'], 'key' => $k,
                        'start_time' => ['elt', time()], 'end_time' => ['gt', time()]])->getField('price');
                    if ($rushPrice) {
                        $product['price'][$k] = [
                            'class_normal' => $v['class_normal'],
                            'original_price' => $v['now_price'],
                            'now_price' => $rushPrice
                        ];
                    } else {
                        $product['price'][$k] = $v;
                    }
                }
                $this->assign('signPackage', $signPackage)->assign('share_img', $shareImg)->assign('share_url', $shareUrl);
                $this->assign('headImg', $headImg)->assign('userCount', $userCount)->assign('isCollect', $isCollect)
                    ->assign('type', $product['type'])->assign('productComment', $productComment)->assign('tags', $tags)
                    ->assign('organization', $organization)->assign('product', $product)->assign('firstKey', $firstKey);
                $this->display();
            } catch (Exception $e) {
                $this->error($e->getMessage());
            }
        }
    }

    public function checkOrderInformation()
    {
        if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
            $this->error('获取不到该商品信息');
        }
        if (!$_GET['key'] || !is_numeric($_GET['key'])) {
            $this->error('规格参数错误');
        }
        try {
            $product = D('Product')->find($_GET['pro_id']);
            $price = json_decode($product['price'], true);
            //判断有否抢购价
            $rushPrice = M('bargain')->where(['type' => 2, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
                'start_time' => ['elt', time()], 'end_time' => ['gt', time()]])->getField('price');
            if ($rushPrice) {
                $product['price'] = [
                    'class_normal' => $price[$_GET['key']]['class_normal'],
                    'original_price' => $price[$_GET['key']]['now_price'],
                    'now_price' => $rushPrice
                ];
            } else {
                $product['price'] = $price[$_GET['key']];
            }
            $this->assign('product', $product);
            $this->display();
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function checkOrderInfo()
    {
        $this->title = "课程详细";
        if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
            $this->error('获取不到该商品信息');
        }
        if (!$_GET['key'] || !is_numeric($_GET['key'])) {
            $this->error('规格参数错误');
        }
        try {
            $product = D('Product')->find($_GET['pro_id']);
            $price = json_decode($product['price'], true);

            //判断有否抢购价
            $rushPrice = M('bargain')->where(['type' => 2, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
                'start_time' => ['elt', time()], 'end_time' => ['gt', time()]])->getField('price');
            if ($rushPrice) {
                $product['price'] = [
                    'class_normal' => $price[$_GET['key']]['class_normal'],
                    'original_price' => $price[$_GET['key']]['now_price'],
                    'now_price' => $rushPrice
                ];
            } else {
                $product['price'] = $price[$_GET['key']];
            }
            $this->assign('product', $product);
            $this->display();
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function confirmationInfo()
    {
        $this->title = "确认信息";
        $id = (int)I('id');
        $count = (int)I('count');
        $key = (int)I('key');
        $product = D('Product')->find($id);
        $prices = json_decode($product['price'], true);
        $price = $prices[$key]['now_price'];
        $normal = $prices[$key]['class_normal'];
        //判断有否抢购价
        $rushPrice = M('bargain')->where(['type' => 2, 'type_id' => $id, 'key' => $key,
            'start_time' => ['elt', time()], 'end_time' => ['gt', time()]])->getField('price');
        if ($rushPrice) {
            $price = $rushPrice;
        }
        $totalPrice = $price * $count;
        $this->assign('count', $count)->assign('product', $product)->assign('id', $id)->assign('totalPrice', $totalPrice);
        $this->display();
    }

    //分享记录
    public function shareRecord()
    {
        $insertData = [
            'create_time' => time(),
            'type' => 2,
            'type_id' => $_POST['pro_id'],
            'desc' => '分享商品',
            'user_id' => $this->user['id'],
        ];
        D('ShareRecord')->insert($insertData);
        return show(0, '分享成功');
    }

    //用户之间留言对话
    public function comment()
    {
        if ($_POST) {
            if (!$_POST['product_id'] || empty($_POST['product_id'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => 'ID参数错误'));
            }
            if (!$_POST['father_id'] || empty($_POST['father_id'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => 'FATHER_ID参数错误'));
            }
            if (!$_POST['content'] || empty($_POST['content'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '咨询内容不能为空'));
            }
            $data = [
                'user_id' => $this->user['id'],
                'father_id' => $_POST['father_id'],
                'product_id' => $_POST['product_id'],
                'content' => $_POST['content'],
                'token' => $this->token,
                'type_id' => $_POST['type_id'],
                'status' => 1,
                'type' => 1,
                'create_time' => time()
            ];
            $id = D('ProductComment')->insert($data);
            //评论人头像
            $reply = D('ProductComment')->find($id);
            $headImg = M('user')->where("id={$reply['user_id']}")->field('headimgurl')->find();
            $reply['headImg'] = $headImg['headimgurl'];
            //被评论人头像
            $replys = D('ProductComment')->find($_POST['father_id']);
            $headImgs = M('user')->where("id={$replys['user_id']}")->field('headimgurl')->find();
            $reply['headImgs'] = $headImgs['headimgurl'];
            if (!$reply || empty($reply)) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '评论失败'));
            }
            $this->ajaxReturn(array('status' => 1, 'msg' => '评论成功', 'data' => $reply));
        }
    }

    public function getClassTable()
    {
        $this->display();
    }

    public function getClassTableAjax()
    {
        if (!$_POST['pro_id']) {
            return show(0, '课程ID参数错误');
        }
        $product = D('Product')->find($_POST['pro_id']);
        $classTime = json_decode($product['class_time'], true);
        $bookTime = json_decode($product['book_time'], true);
        if (!$_POST['start_date']) {
            $differDays = date('w', time());
            $startTime = time() - 86400 * $differDays;
        } else {
            $startTime = $_POST['start_date'];
        }
        $weekArray = [
            ['day' => '周日', 'year' => date("Y", $startTime), "month" => date("m", $startTime), 'date' => date("d", $startTime)],
            ['day' => '周一', 'year' => date("Y", $startTime + 86400), "month" => date("m", $startTime + 86400), 'date' => date("d", $startTime + 86400)],
            ['day' => '周二', 'year' => date("Y", $startTime + 86400 * 2), "month" => date("m", $startTime + 86400 * 2), 'date' => date("d", $startTime + 86400 * 2)],
            ['day' => '周三', 'year' => date("Y", $startTime + 86400 * 3), "month" => date("m", $startTime + 86400 * 3), 'date' => date("d", $startTime + 86400 * 3)],
            ['day' => '周四', 'year' => date("Y", $startTime + 86400 * 4), "month" => date("m", $startTime + 86400 * 4), 'date' => date("d", $startTime + 86400 * 4)],
            ['day' => '周五', 'year' => date("Y", $startTime + 86400 * 5), "month" => date("m", $startTime + 86400 * 5), 'date' => date("d", $startTime + 86400 * 5)],
            ['day' => '周六', 'year' => date("Y", $startTime + 86400 * 6), "month" => date("m", $startTime + 86400 * 6), 'date' => date("d", $startTime + 86400 * 6)],
        ];
        foreach ($weekArray as $key => $val) {
            foreach ($classTime as $k => $v) {
                if ($val['day'] == $v['class_time_day']) {
                    $weekArray[$key]['class_time'][] = $v;
                }
            }
            foreach ($bookTime as $ke => $va) {
                if ($val['day'] == $va['book_time_day']) {
                    $weekArray[$key]['book_time'][] = $va;
                }
            }
        }
        $header = [
            'start_date' => date("m-d", $startTime),
            'end_date' => date("m-d", strtotime("+6 day", $startTime)),
        ];
        $data = [
            'header' => $header,
            'weekArray' => $weekArray
        ];
        return show(1, '', $data);
    }

    public function getBookTimeByDay()
    {
        if (!$_POST['pro_id']) {
            return show(0, '商品ID不能为空');
        }
        if (!$_POST['time']) {
            return show(0, '日期参数有误');
        }
        $bookTime = M('product')->where("id={$_POST['pro_id']}")->getField('book_time');
        $weekArray = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
        $day = $weekArray[date('w', $_POST['time'])];
        $bookTime = json_decode($bookTime, true);
        $canBookTime = [];
        foreach ($bookTime as $key => $val) {
            if ($val['book_time_day'] == $day) {
                $canBookTime[] = [
                    'start_time' => $val['book_start_hour'],
                    'end_time' => $val['book_end_hour'],
                ];
            }
        }
        $canBook['book_time'] = $canBookTime;
        if (empty($canBookTime)) {
            return show(0, '无可预约时间');
        }
        return show(1, '', $canBook);
    }

    public function getBookReadRecord()
    {
        if (!$_POST['pro_id']) {
            return show(0, '商品ID不能为空');
        }
        if (!$_POST['name']) {
            return show(0, '姓名不能为空');
        }
        if (!$_POST['tel']) {
            return show(0, '手机号不能为空');
        }
        $token = M('product')->where(array('id' => $_POST['pro_id']))->getField('token');
        $data = [
            'create_time' => time(),
            'type' => 1,
            'type_id' => $_POST['pro_id'],
            'user_id' => $this->user['id'],
            'name' => $_POST['name'],
            'mobile' => $_POST['tel'],
            'status' => 1,
            'token' => $token,
            'start_time' => strtotime($_POST['year'] . '-' . $_POST['month'] . '-' . $_POST['date'] . ' ' . $_POST['start_time']),
            'end_time' => strtotime($_POST['year'] . '-' . $_POST['month'] . '-' . $_POST['date'] . ' ' . $_POST['end_time']),
            'is_read' => 1
        ];
        //判断是否有预约记录
        $isBook = M('BookRecord')->where(array('type' => 1, 'type_id' => $_POST['pro_id'], 'user_id' => $this->user['id']))->find();
        if ($isBook) {
            if ($isBook['status'] != 4) {
                if ($isBook['count'] < 3) {
                    $data['count'] = $isBook['count'] + 1;
                    $id = D('BookRecord')->updateById($isBook['id'], $data);
                    if ($id) {
                        $this->sendMsgToOrgBook($isBook['id']);
                        return show(1, '为您更新了预约');
                    } else {
                        return show(0, '您之前预约过此课程了呢');
                    }
                } else {
                    return show(0, '您预约修改的次数太多，请联系管理员');
                }
            } else {
                return show(0, '预约失败');
            }
        } else {
            //没预约就提交数据
            $recordId = D('BookRecord')->insert($data);
            if ($recordId) {
                $sms = $this->sendMsgToOrg($recordId);
                if ($sms) {
                    return show(1, '预约成功');
                }
            } else {
                return show(0, '预约失败');
            }
        }
    }

    //向机构管理员发送信息通知
    public function sendMsgToOrg($bookId)
    {
        $bookClass = D('BookRecord')->find($bookId);
        $proTitle = M('product')->where(array('id' => $bookClass['type_id']))->getField('title');
        $orgId = M('organization')->where(array('token' => $bookClass['token']))->getField('id');
        $orgName = M('organization')->where(array('token' => $bookClass['token']))->getField('org_name');
        $orgMobile = M('admin_user')->where(array('org_id' => $orgId, 'mobile' => array(array('exp', 'is not null'), array('neq', 0), 'and')))->getField('mobile');
        $sms = new \ChuanglanSmsApi();
        $msg = '{$var} 您好，您在优培圈上架的课程 {$var} 有家长预约上课了，请及时登录后台跟进！';
        $params = "{$orgMobile},{$orgName},{$proTitle}";
        $result = $sms->sendVariableSMS($msg, $params);
        $recordData = [
            'create_time' => time(),
            'content' => "{$orgName}您好，您在优培圈上架的课程 {$proTitle} 有家长预约上课了，请及时登录后台跟进！",
            'type' => 3,
            'type_id' => $bookClass['id'],
            'mobile' => $orgMobile
        ];
        if (!is_null(json_decode($result))) {
            $output = json_decode($result, true);
            if (isset($output['code']) && $output['code'] == '0') {
                $recordData['status'] = 2;
                $recordData['err_code'] = $output['code'];
                return D('SmsRecord')->insert($recordData);
            } else {
                $recordData['status'] = 3;
                $recordData['err_code'] = $output['code'];
                $recordData['err_msg'] = $output['errorMsg'];
                return D('SmsRecord')->insert($recordData);
            }
        } else {
            $recordData['status'] = 3;
            $recordData['err_code'] = 'undefined';
            $recordData['err_msg'] = '发送失败';
            return D('SmsRecord')->insert($recordData);
        }
    }

    //向机构管理员发送信息通知
    public function sendMsgToOrgBook($bookId)
    {
        $bookClass = D('BookRecord')->find($bookId);
        $proTitle = M('product')->where(array('id' => $bookClass['type_id']))->getField('title');
        $orgId = M('organization')->where(array('token' => $bookClass['token']))->getField('id');
        $orgName = M('organization')->where(array('token' => $bookClass['token']))->getField('org_name');
        $orgMobile = M('admin_user')->where(array('org_id' => $orgId, 'mobile' => array(array('exp', 'is not null'), array('neq', 0), 'and')))->getField('mobile');
        $sms = new \ChuanglanSmsApi();
        $msg = '{$var} 您好，您的课程 {$var} 有家长更改了预约时间，请及时登录后台跟进！';
        $params = "{$orgMobile},{$orgName},{$proTitle}";
        $result = $sms->sendVariableSMS($msg, $params);
        $recordData = [
            'create_time' => time(),
            'content' => "{$orgName}您好，您的课程 {$proTitle} 有家长更改了预约时间，请及时登录后台跟进！",
            'type' => 3,
            'type_id' => $bookClass['id'],
            'mobile' => $orgMobile
        ];
        if (!is_null(json_decode($result))) {
            $output = json_decode($result, true);
            if (isset($output['code']) && $output['code'] == '0') {
                $recordData['status'] = 2;
                $recordData['err_code'] = $output['code'];
                return D('SmsRecord')->insert($recordData);
            } else {
                $recordData['status'] = 3;
                $recordData['err_code'] = $output['code'];
                $recordData['err_msg'] = $output['errorMsg'];
                return D('SmsRecord')->insert($recordData);
            }
        } else {
            $recordData['status'] = 3;
            $recordData['err_code'] = 'undefined';
            $recordData['err_msg'] = '发送失败';
            return D('SmsRecord')->insert($recordData);
        }
    }

    //砍价商品
    public function bargain()
    {
        $this->display();
    }

    public function bargainList()
    {
        $this->display();
    }

    public function ajaxBargain()
    {
        if (!$_GET['pro_id'] || empty($_GET['pro_id'])) {
            return show(0, 'ID不能为空');
        }
        if (!$_GET['key']) {
            return show(0, '规格不能为空');
        }
        $bargain = M('bargain')->where(array('type' => 1, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
            'start_time' => array('LT', time()), 'end_time' => array('GT', time())))->find();
        if (!$bargain) {
            return show(0, '此产品未参加砍价活动');
        }
        if ($_GET['share_user_id'] == 0 || $_GET['share_user_id'] == $this->user['id']) {
            $isMe = 2;  //我自己
            $share_user_id = $this->user['id'];
            //砍价帮助人数和金额
            $bargainHelpUser = D('BargainRecord')->bargainHelpByUser($this->user['id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
            $bargainPeople = count($bargainHelpUser);
            $bargainPrice = D('BargainRecord')->bargainHelpByPrice($this->user['id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
            //付款，未付款，交易完成，退款中，已退款,付款之后不能再使用砍价额度
            $order = M('order')->where(array('user_id' => $this->user['id'], 'product_id' => $_GET['pro_id'], 'key' => $_GET['key'],
                'bargain_id' => $bargain['id'], 'status' => array(array('EQ', 0), array('EQ', 1), array('EQ', 4), array('EQ', 6), array('EQ', 7), 'or'),
                'create_time' => array(array('GT', $bargain['start_time']), array('LT', $bargain['end_time']), 'and')))->find();
            if (!$order) {
                $isBuy = -1;
            } else {
                $isBuy = $order['status'];
            }
        } else {
            $isBuy = -1;
            $isMe = 1;
            $share_user_id = $_GET['share_user_id'];
            //砍价帮助人数和金额
            $bargainHelpUser = D('BargainRecord')->bargainHelpByUser($_GET['share_user_id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
            $bargainPeople = count($bargainHelpUser);
            $bargainPrice = D('BargainRecord')->bargainHelpByPrice($_GET['share_user_id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
        }
        $userImage = [];
        $userPrice = [];
        foreach ($bargainHelpUser as $k => $v) {
            $userImage[$k] = D('User')->getHeadById($v['user_id']);
            $userPrice[$k] = $v['price'];
        }
        $product = M('product')->where(array('id' => $_GET['pro_id']))->find();
        $prices = json_decode($product['price'], true);
        $price = $prices[$_GET['key']]['original_price'];
        $product['original_price'] = $price;
        $product['class_normal'] = $prices[$_GET['key']]['class_normal'];
        //获取ticket
        $wxuser = get_wxuser($this->token);
        $jssdk = new \JSSDK($wxuser['appid'], $wxuser['appsecret']);
        $signPackage = $jssdk->GetSignPackage();
        //分享内容图片和链接地址
        if (strpos($product['pic_url'], 'http') === false) {
            $shareImg = 'http://' . $_SERVER["HTTP_HOST"] . $product['pic_url'];
        } else {
            $shareImg = $product['pic_url'];
        }
        $userName = D('User')->getNameById($this->user['id']);
        $product['f_title'] = $userName . '邀请你来帮Ta减价!!';
        /*$shareUrl = 'http://' . $_SERVER["HTTP_HOST"] . U('Product/bargain', array('share_user_id' =>
                $this->user['id'], 'pro_id' => $_GET['pro_id'], 'token' => $this->token));*/
        $shareUrl = 'http://' . $_SERVER["HTTP_HOST"] . '/index.php/Product/bargain?share_user_id=' . $share_user_id .
            '&pro_id=' . $_GET['pro_id'] . '&token=' . $this->token . '&key=' . $_GET['key'];
        $data = [
            'signPackage' => $signPackage,
            'shareImg' => $shareImg,
            'shareUrl' => $shareUrl,
            'product' => $product,
            'bargainPeople' => $bargainPeople,
            'bargainPrice' => $bargainPrice,
            'userImage' => $userImage,
            'userPrice' => $userPrice,
            'isBuy' => $isBuy,
            'isMe' => $isMe,
            'totalBargainPrice' => $bargain['price'],
        ];
        return show(1, '', $data);
    }

    //砍他一刀
    public function bargainHelp()
    {
        if (!$_GET['pro_id'] || empty($_GET['pro_id'])) {
            return show(0, 'ID不能为空');
        }
        if (!$_GET['share_user_id'] || empty($_GET['share_user_id'])) {
            return show(0, 'ID不能为空');
        }
        if ($_GET['share_user_id'] == $this->user['id']) {
            return show(0, '不能给自己砍价哦~');
        }
        if (!$_GET['key']) {
            return show(0, '品类参数错误');
        }
        $bargain = D('Bargain')->isBargain($type_id = $_GET['pro_id'],$_GET['key']);
        $where['create_time'] = array(array('LT', $bargain['end_time']), array('GT', $bargain['start_time']), 'and');
        $isBargain = M('BargainRecord')->where($where)->where(array('share_user_id' => $_GET['share_user_id'],
            'bargain_id' => $bargain['id'], 'user_id' => $this->user['id']))->find();
        if ($isBargain) {
            return show(2, '你已经帮他砍过价了呢!');
        }
        //砍价随机数 精确到小数点后2位
        $priceUpper = $bargain['price'] * 0.01;
        $priceLower = $bargain['price'] * 0.03;
        $price = substr($this->randFloat($priceUpper, $priceLower), 0, 4);
        $priceSum = M('BargainRecord')->where($where)->where(array('share_user_id' => $_GET['share_user_id'], 'bargain_id' => $bargain['id']))->sum('price');
        if ($priceSum >= $bargain['price']) {
            return show(3, '人家已经完成砍价了呢:)');
        } elseif (($priceSum + $price) > $bargain['price']) {
            $price = $bargain['price'] - $priceSum;
        }
        $insertData = [
            'create_time' => time(),
            'bargain_id' => $bargain['id'],
            'user_id' => $this->user['id'],
            'share_user_id' => $_GET['share_user_id'],
            'price' => $price
        ];
        $id = D('BargainRecord')->insert($insertData);
        if ($id) {
            //未付款
            $isOrder = M('order')->where(array('user_id' => $_GET['share_user_id'], 'product_id' => $_GET['pro_id'],
                'bargain_id' => $bargain['id'], 'status' => array('neq', 0),
                'create_time' => array(array('GT', $bargain['start_time']), array('LT', $bargain['end_time']), 'and')))->getField('id');
            if (!$isOrder) {
                $userPeople = D('BargainRecord')->bargainHelpByUser($_GET['share_user_id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
                $userCount = count($userPeople);
                if ($userCount % 3 == 0) {
                    $productToken = "g232238gc959";
                    $productTitle = M('product')->where(array('id' => $_GET['pro_id']))->getField('title');
                    $prices = D('BargainRecord')->bargainHelpByPrice($_GET['share_user_id'], $bargain['id'], $bargain['start_time'], $bargain['end_time']);
                    $user = D('User')->find($_GET['share_user_id']);
                    //发送通知模板
                    $first = '【优培圈】温馨提醒您的砍价进度';
                    $keyword1 = $productTitle;
                    $keyword2 = '已有' . $userCount . '个人帮您砍了' . $prices . '元了';
                    $keyword3 = date("Y-m-d H:i:s", time());
                    $remark = '请点击“详情”购买商品';
                    $url = "http://{$_SERVER['HTTP_HOST']}/index.php/Product/bargain.html?pro_id=" . $_GET['pro_id'] . "&token=" . $productToken;
                    $templeFormat = array('__OPENID__', '__URL__', '__FIRST__', '__KEYWORD1__', '__KEYWORD2__', '__KEYWORD3__', '__KEYWORD4__', '__REMARK__');
                    $infoFormat = array($user['open_id'], $url, $first, $keyword1, $keyword2, $keyword3, $remark);
                    $wxuser = get_wxuser($productToken);
                    $result = execute_public_template('BARGAIN_SCHEDULE', $templeFormat, $infoFormat, $wxuser);
                    if (isset($result['errcode']) && $result['errcode'] == 0) {
                        $status = 2;
                    } else {
                        $status = 1;
                    }
                    $data = [
                        'user_id' => $user['id'],
                        'type' => 1,
                        'type_id' => $_GET['pro_id'],
                        'create_time' => time(),
                        'errmsg' => $result['errmsg'],
                        'errcode' => $result['errcode'],
                        'status' => $status,
                    ];
                    $id = D('TemplateRecord')->insert($data);
                }
            }
            return show(1, '砍价成功', $price);
        } else {
            return show(0, '砍价失败');
        }
    }

    //随机数
    function randFloat($min, $max)
    {
        return $min + mt_rand() / mt_getrandmax() * ($max - $min);
    }

    //分享砍价记录
    public function bargainRecord()
    {
        $bargain = M('Bargain')->where(array('type' => 1, 'type_id' => $_POST['pro_id'],
            'start_time' => ['lt', time()], 'end_time' => ['gt', time()]))->find();
        $isShare = M('BargainRecord')->where(array('user_id' => $this->user['id'], 'bargain_id' => $bargain['id'], 'share_user_id' => array('EXP', 'IS NULL')))->select();
        if ($isShare) {
            return show(1, '分享成功,请赶快跟朋友说一声吧');
        } else {
            $bargain = M('Bargain')->where(array('type' => 1, 'type_id' => $_POST['pro_id']))->find();
            $insertData = [
                'create_time' => time(),
                'bargain_id' => $bargain['id'],
                'user_id' => $this->user['id'],
            ];
            D('BargainRecord')->insert($insertData);
            return show(1, '分享成功，请赶快跟朋友说一声吧：）');
        }
    }

    public function bargainCheckOrderInfo()
    {
        $this->title = "商品详细";
        if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
            $this->error('获取不到该商品信息');
        }
        if (!$_GET['key']) {
            return show(0, '规格参数错误');
        }
        try {
            $product = D('Product')->find($_GET['pro_id']);
            //判断砍价
            $bargain = M('bargain')->where(['type' => 1, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
                'start_time' => ['lt', time()], 'end_time' => ['gt', time()]])->find();
            $productPrice = json_decode($product['price'], true);
            $originalPrice = $productPrice[$bargain['key']]['original_price'];
            //付款，未付款，交易完成，退款中，已退款,付款之后不能再使用砍价额度
            $isBargainByOrder = M('order')->where(array('user_id' => $this->user['id'], 'product_id' => $product['id'],
                'bargain_id' => $bargain['id'], 'status' => array(array('EQ', 0), array('EQ', 1), array('EQ', 4), array('EQ', 6), array('EQ', 7), 'or'),
                'create_time' => array(array('GT', $bargain['start_time']), array('LT', $bargain['end_time']), 'and')))->find();
            if ($isBargainByOrder) {
                $price = 0;
            } else {
                $price = M('BargainRecord')->where(array('bargain_id' => $bargain['id'],
                    'create_time' => array(array('LT', $bargain['end_time']), array('GT', $bargain['start_time']), 'and'),
                    'share_user_id' => $this->user['id']))->sum('price');
            }
            $product['bargain_price'] = $originalPrice - $price;
            $this->assign('product', $product)->assign('originalPrice', $originalPrice);
            $this->display();
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function bargainCheckOrderInformation()
    {
        if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
            $this->error('获取不到该商品信息');
        }
        if (!$_GET['key']) {
            return show(0, '规格参数错误');
        }
        try {
            $product = D('Product')->find($_GET['pro_id']);
            //判断砍价
            $bargain = M('bargain')->where(['type' => 1, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
                'start_time' => ['lt', time()], 'end_time' => ['gt', time()]])->find();
            $productPrice = json_decode($product['price'], true);
            $originalPrice = $productPrice[$bargain['key']]['original_price'];
            //付款，未付款，交易完成，退款中，已退款,付款之后不能再使用砍价额度
            $isBargainByOrder = M('order')->where(array('user_id' => $this->user['id'], 'product_id' => $product['id'],
                'bargain_id' => $bargain['id'], 'status' => array(array('EQ', 0), array('EQ', 1), array('EQ', 4), array('EQ', 6), array('EQ', 7), 'or'),
                'create_time' => array(array('GT', $bargain['start_time']), array('LT', $bargain['end_time']), 'and')))->find();
            if ($isBargainByOrder) {
                $price = 0;
            } else {
                $price = M('BargainRecord')->where(array('bargain_id' => $bargain['id'],
                    'create_time' => array(array('LT', $bargain['end_time']), array('GT', $bargain['start_time']), 'and'),
                    'share_user_id' => $this->user['id']))->sum('price');
            }
            $product['bargain_price'] = $originalPrice - $price;
            $product['price'] = $productPrice[$bargain['key']];
            $this->assign('product', $product)->assign('originalPrice', $originalPrice);
            $this->display();
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function bargainConfirmationInfo()
    {
        $this->title = "确认信息";
        $id = (int)I('id');
        $count = (int)I('count');
        $key = (int)I('key');
        $product = D('Product')->find($id);
        //判断砍价
        $bargain = M('Bargain')->where(array('type' => 1, 'type_id' => $id, 'key' => $key,
            'start_time' => array('LT', time()), 'end_time' => array('GT', time())))->find();
        //付款，未付款，交易完成，退款中，已退款,付款之后不能再使用砍价额度
        $isBargainByOrder = M('order')->where(array('user_id' => $this->user['id'], 'product_id' => $product['id'],
            'bargain_id' => $bargain['id'], 'status' => array(array('EQ', 0), array('EQ', 1), array('EQ', 4), array('EQ', 6), array('EQ', 7), 'or'),
            'create_time' => array(array('GT', $bargain['start_time']), array('LT', $bargain['end_time']), 'and')))->find();
        if ($isBargainByOrder) {
            $price = 0;
        } else {
            $price = M('BargainRecord')->where(array('bargain_id' => $bargain['id'],
                'create_time' => array(array('LT', $bargain['end_time']), array('GT', $bargain['start_time']), 'and'),
                'share_user_id' => $this->user['id']))->sum('price');
        }
        //显示可用的代金券和优惠券
        $originalPrice = json_decode($product['price'], true);
        $originalPrice = $originalPrice[$key]['original_price'];
        $totalPrice = $originalPrice * $count - $price;
        //代金券
        $cashCoupons = D('Coupon')->getCashCoupon($this->user['id'], $product['org_id']);
        //优惠券
        $coupons = D('Coupon')->getCouponByUser($this->user['id'], $product['org_id']);
        $this->assign('count', $count)->assign('product', $product)->assign('id', $id)->assign('totalPrice', $totalPrice);
        $this->assign('cashCoupons', $cashCoupons)->assign('coupons', $coupons)->assign('price', $price);
        $this->display();
    }

    //获取规格价钱
    public function getNormalPrice()
    {
        if (!$_GET['pro_id']) {
            return show(0, 'ID参数错误');
        }
        if (!$_GET['key']) {
            return show(0, '规格参数错误');
        }
        $price = M('product')->where(['id' => $_GET['pro_id']])->getField('price');
        $price = json_decode($price, true);
        $normal = $price[$_GET['key']];
        //判断有否抢购价
        $rushPrice = M('bargain')->where(['type' => 2, 'type_id' => $_GET['pro_id'], 'key' => $_GET['key'],
            'start_time' => ['elt', time()], 'end_time' => ['gt', time()]])->getField('price');
        if ($rushPrice) {
            $normal = [
                'class_normal' => $normal['class_normal'],
                'original_price' => $normal['now_price'],
                'now_price' => $rushPrice
            ];
        }
        //判断是否砍价
        $isBargain = D('Bargain')->isBargain($_GET['pro_id'], $_GET['key']);
        if (!$normal) {
            return show(0, '获取失败');
        } else {
            return show(1, '获取成功', ['normal' => $normal, 'isBargain' => $isBargain]);
        }
    }
}