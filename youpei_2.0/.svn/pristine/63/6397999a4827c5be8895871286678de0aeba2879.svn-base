<?php
/**
 * 投票
 */
namespace Admin\Controller;

use Think\Controller;
use Think\Exception;

class VoteController extends CommonController
{
    public function getList()
    {
        if ($this->isSuper) {
            $list = D('Vote')->getList();
        } else {
            $org_id = M('organization')->where(['token' => $this->token])->getField('id');
            $list = D('Vote')->getList(['type' => 1, 'type_id' => $org_id]);
        }
        $this->assign('list', $list);
        $this->display();
    }

    public function addVote()
    {
        if ($_POST) {
            if (!$_POST['title']) {
                return show(0, '投票标题不能为空');
            }
            if (!$_POST['work_start_time']) {
                return show(0, '开始投稿时间不能为空');
            } else {
                $_POST['work_start_time'] = strtotime($_POST['work_start_time']);
            }
            if (!$_POST['work_end_time']) {
                return show(0, '截稿时间不能为空');
            } else {
                $_POST['work_end_time'] = strtotime($_POST['work_end_time']) + 86399;
            }
            if (!$_POST['vote_end_time']) {
                return show(0, '结束投票时间不能为空');
            } else {
                $_POST['vote_end_time'] = strtotime($_POST['vote_end_time']) + 86399;
            }
            if (!$_POST['image']) {
                unset($_POST['image']);
            }
            $_POST['type'] = 1;
            try {
                $org_id = M('organization')->where(['token' => $this->token])->getField('id');
                $_POST['type_id'] = $org_id;
                if ($_POST['id']) {
                    return $this->save(array_merge($_POST, ['check_status' => 1]));
                }
                $id = D('Vote')->insert($_POST);
                if ($id) {
                    return show(1, '添加成功，请等待审核');
                } else {
                    return show(0, '添加失败');
                }
            } catch (Exception $e) {
                return show(0, $e->getMessage());
            }
        } else {
            $this->display();
        }
    }

    public function editVote()
    {
        if (!$_GET['id']) {
            return show(0, '参数错误');
        }
        try {
            $vote = D('Vote')->find($_GET['id']);
            $this->assign('vote', $vote);
            $this->display();
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    public function save($data)
    {
        try {
            $id = D('Vote')->updateById($data['id'], $data);
            if ($id === false) {
                return show(0, '修改失败');
            }
            return show(1, '修改成功');
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    public function delete()
    {
        if (!$_POST['id'] || empty($_POST['id'])) {
            return show(0, '参数错误');
        }
        try {
            $result = D('Vote')->delete($_POST['id']);
            if ($result) {
                return show(1, '删除成功');
            } else {
                return show(0, '删除失败');
            }
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    //获取投稿列表
    public function getContribution()
    {
        if (!$_GET['id']) {
            return show(0, '投票ID参数错误');
        }
        $where = ['vote_id' => $_GET['id']];
        $contributions = D('ContributionRecord')->getList($where);
        foreach ($contributions as $key => $val) {
            $contributions[$key]['nickname'] = D('User')->getNameById($val['user_id']);
        }
        $this->assign('list', $contributions)->assign('vote_id', $_GET['id']);
        $this->display();
    }

    //修改投票结果
    public function submitContributionStatus()
    {
        if (!$_POST['id']) {
            return show(0, '参数错误');
        }
        if (!$_POST['status']) {
            return show(0, '结果参数错误');
        }
        $data = [
            'status' => $_POST['status'],
            'lose_reason' => $_POST['lose_reason']
        ];
        try {
            $id = D('ContributionRecord')->updateById($_POST['id'], $data);
            if ($id === false) {
                return show(0, '修改失败');
            } else {
                return show(1, '修改成功');
            }
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

    //发布投稿结果
    public function showContributionResult()
    {
        if (!$_GET['contribution_id']) {
            return show(0, '投票ID不能为空');
        }
        $contribution = D('ContributionRecord')->find($_GET['contribution_id']);
        $voteTitle = M('Vote')->where(['id' => $_GET['vote_id']])->getField('title');
        $nickname = M('user')->where(['id' => $contribution['user_id']])->getField('username');
        $userOpenid = M('user')->where(['id' => $contribution['user_id']])->getField('open_id');
        if ($contribution['status'] == 3) { //落选
            $first = $nickname . '，不要气馁，下次你一定可以的';
            $remark = '点击再次投稿吧';
            $url = "http://{$_SERVER['HTTP_HOST']}/index.php/Vote/contribution?vote_id=" . $_GET['vote_id'] . "&token=" . $this->token;
        } else if ($contribution['status'] == 2) { // 入围
            $first = $nickname . '，恭喜你，你的作品入围了，赶快去拉票吧';
            $remark = '点击查看入围作品';
            $url = "http://{$_SERVER['HTTP_HOST']}/index.php/Vote/voteDetail?id=" . $_GET['contribution_id'] . "&vote_id=".$_GET['vote_id']."&token=" . $this->token;
        } else {
            return show(0, '作品参数错误');
        }
        $keyword1 = $voteTitle;
        $keyword2 = $contribution['status'] == 2 ? '入围' : "落选原因：" . $contribution['lose_reason'];
        $templeFormat = array('__OPENID__', '__URL__', '__FIRST__', '__KEYWORD1__', '__KEYWORD2__', '__REMARK__');
        $infoFormat = array($userOpenid, $url, $first, $keyword1, $keyword2, $remark);
        $wxuser = get_wxuser("g232238gc959");
        $result = execute_public_template('CONTRIBUTION', $templeFormat, $infoFormat, $wxuser);
        if ($result['errcode'] == 0) {
            D('ContributionRecord')->updateById($contribution['id'], ['template_status' => 2]);
        } else {
            D('ContributionRecord')->updateById($contribution['id'], ['template_status' => 3]);
            return show(0, '发送失败');
        }
        return show(1, '发送成功');
    }

    public function showContribution()
    {
        if (!$_GET['id']) {
            return show(0, '参数错误');
        }
        $contribution = M('contribution_record')->where(['id' => $_GET['id']])->field('path,type')->find();
        $path = json_decode($contribution['path'],true);
        if (!$contribution) {
            return show(0, '获取不了该作品');
        } else {
            return show(1, '获取成功', ['path' => $path, 'type' => $contribution['type']]);
        }
    }

    public function getVoteList()
    {
        if (!$_GET['vote_id']) {
            return show(0, 'ID不能为空');
        }
        $vote = D('Vote')->find($_GET['vote_id']);
        $list = D('ContributionRecord')->getList(['vote_id' => $_GET['vote_id']]);
        foreach ($list as $k => $v) {
            if($vote['mode'] == 2){
                if($v['vote_count'] >= $vote['vote_poll']){
                    $list[$k]['ratio_count'] = $vote['vote_grade'];
                }else{//保留2位小数不四舍五入
                    $list[$k]['ratio_count'] = substr(sprintf("%.2f", $v['vote_count'] * ($vote['vote_grade'] / $vote['vote_poll'])),0,-1);
                }
            }
            $list[$k]['nickname'] = D('User')->getNameById($v['user_id']);
        }
        $this->assign('list', $list)->assign('mode', $vote['mode']);
        $this->display();
    }


    public function getProductList()
    {
        if (!$_GET['vote_id']) {
            return show(0, 'ID不能为空');
        }
        $list = M('bargain')->where(array('type'=>3,'vote_id'=>$_GET['vote_id']))->select();
        foreach ($list as $k => $v){
            $product[$k] = D('Product')->find($v['type_id']);
            $list[$k]['title'] = $product[$k]['title'];
            $list[$k]['count'] = $product[$k]['count'];
            $key[$k] = json_decode($product[$k]['price'], true);
            foreach ($key[$k] as $z => $y){
                if($z == $v['key']){
                    $list[$k]['keyName'] = $y['class_normal'];
                }
            }
            $list[$k]['orgName'] = D('Organization')->getOrgnameByToken($v['token']);
        }
        $vote = D('Vote')->find($_GET['vote_id']);
        //status 1-投稿中 2-截止投稿 3-投票中 4-截止投票 5-发布结果 6-结束
        if ($vote['status'] == 4 || $vote['status'] == 5 || $vote['status'] == 6 || $vote['vote_end_time'] < time()) {
            //$voteStatus 1-活动结束 2-活动中
            $voteStatus = 1;
        } else {
            $voteStatus = 2;
        }
        $this->assign('list', $list)->assign('voteStatus',$voteStatus);
        $this->display();
    }

    public function addVoteProduct()
    {
        if ($_POST) {
            if (!$_POST['type_id']) {
                return show(0, 'ID不能为空');
            }
            $_POST['type'] = 3;
            $_POST['token'] = $this->token;
            try {
                if ($_POST['id']) {
                    return $this->edit($_POST);
                }
                $id = D('Bargain')->insert($_POST);
                if ($id) {
                    return show(1, '添加成功');
                } else {
                    return show(0, '添加失败');
                }
            } catch (Exception $e) {
                return show(0, $e->getMessage());
            }
        } else {
            if(!$_GET['vote_id']){
                return show(0,'ID不能为空');
            }
            $list = M('product')->where(array('check_status'=>2,'status'=>1,'token'=>$this->token))->select();
            $this->assign('list',$list)->assign('voteId',$_GET['vote_id']);
            $this->display();
        }
    }

    public function cancelVoteProduct()
    {
        if (!$_POST['id'] || empty($_POST['id'])) {
            return show(0, '参数错误');
        }
        try {
            $result = D('Bargain')->delete($_POST['id']);
            if ($result) {
                return show(1, '删除成功');
            } else {
                return show(0, '删除失败');
            }
        } catch (Exception $e) {
            return show(0, $e->getMessage());
        }
    }

}