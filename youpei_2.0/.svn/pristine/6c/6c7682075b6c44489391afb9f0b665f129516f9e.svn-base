<?php
namespace Home\Controller;

use Think\Controller;
use Think\Exception;

require_once __DIR__ . '/../../../ThinkPHP/Library/Org/Util/JSDDK.class.php';
require_once __DIR__ . '/../../../ThinkPHP/Library/Vendor/ChuanglanSmsHelper/ChuanglanSmsApi.php';

class ProductController extends BaseController
{
    public function productDetails()
    {
        if ($_POST) {
            if (!$_POST['product_id'] || empty($_POST['product_id'])) {
                return show(0, '商品参数错误');
            }
            if (!$_POST['content'] || empty($_POST['content'])) {
                return show(0, '咨询内容不能为空');
            }
            $insertData = array(
                'product_id' => $_POST['product_id'],
                'user_id' => $this->user['id'],
                'create_time' => time(),
                'type' => 1,
                'status' => 1,
                'content' => $_POST['content'],
                'token' => $this->token,
            );
            $id = D('ProductComment')->insert($insertData);
            $list = D('ProductComment')->find($id);
            $headImg = M('user')->where("id={$list['user_id']}")->field('headimgurl')->find();
            $list['headImg'] = $headImg['headimgurl'];
            if (!$list || empty($list)) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '咨询失败'));
            }
            $this->ajaxReturn(array('status' => 1, 'msg' => '咨询成功', 'data' => $list));
        } else {
            $this->title = "课程名称";
            if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
                $this->error('获取不到该商品信息');
            }
            try {
                $product = D('Product')->find($_GET['pro_id']);
                //判断抢购价
                $product['price'] = D('Product')->isRushingById($_GET['pro_id']);
                //评论列表
                $productComment = D('ProductComment')->getCommentByFatherId(0, 0, $_GET['pro_id']);
                foreach ($productComment as $k => $v) {
                    $productComment[$k]['child'] = M('ProductComment')->where(array('type_id' => $v['id'], 'product_id' => $v['product_id'], 'status' => 1))->select();
                    $productComment[$k]['headImg'] = D('user')->getHeadById($v['user_id']);
                    foreach ($productComment[$k]['child'] as $ke => $va) {
                        //回复
                        if ($va['is_gm'] == 2) {
                            //待机构管理员完善之后需修改
                            //客服头像
                            $picture = M('organization')->field('picture')->where(array('token' => $this->token))->find();
                            $productComment[$k]['child'][$ke]['headImg'] = $picture['picture'];
                        } elseif ($va['is_gm'] == 1) {
                            $productComment[$k]['child'][$ke]['headImg'] = D('user')->getHeadById($va['user_id']);
                        }
                        //被回复
                        $userId = M('ProductComment')->where(array('id' => $productComment[$k]['child'][$ke]['father_id']))->find();
                        if ($userId['is_gm'] == 2) {
                            $pictures = M('organization')->field('picture')->where(array('token' => $userId['token']))->find();
                            $productComment[$k]['child'][$ke]['headImgs'] = $pictures['picture'];
                        } else if ($userId['is_gm'] == 1) {
                            $productComment[$k]['child'][$ke]['headImgs'] = D('user')->getHeadById($userId['user_id']);
                        }
                    }
                }
                //标签
                $tags = explode(' ', $product['tag']);
                //机构
                $organization = D('Organization')->find($product['org_id']);
                $this->assign('product', $product)->assign('productComment', $productComment)->assign('tags', $tags)
                    ->assign('organization', $organization);
                //获取ticket
                $wxuser = get_wxuser($this->token);
                $jssdk = new \JSSDK($wxuser['appid'], $wxuser['appsecret']);
                $signPackage = $jssdk->GetSignPackage();
                //分享内容图片和链接地址
                $shareImg = 'http://' . $_SERVER["HTTP_HOST"] . $product['pic_url'];
                $shareUrl = 'http://' . $_SERVER["HTTP_HOST"] . U('Product/productDetails', array('share_user_id' =>
                        $this->user['id'], 'pro_id' => $_GET['pro_id'], 'token' => $this->token));
                //购买商品的所有用户头像
                $productId = $_GET['pro_id'];
                $userId = D('Order')->getGroupById($productId);
                foreach ($userId as $k => $v) {
                    $headImg[$k]['headImg'] = D('User')->getHeadById($v['user_id']);
                }
                $userCount = sizeof($userId);
                //是否收藏
                $isCollect = D('Collect')->isCollectById($this->user['id'], $_GET['pro_id'], $product['type'] == 1 ? 2 : 3);
                $this->assign('signPackage', $signPackage)->assign('share_img', $shareImg)->assign('share_url', $shareUrl);
                $this->assign('headImg', $headImg)->assign('userCount', $userCount)->assign('isCollect', $isCollect);
                $this->display();
            } catch (Exception $e) {
                $this->error($e->getMessage());
            }
        }
    }

    public function checkOrderInfo()
    {
        $this->title = "课程详细";
        if (!$_GET['pro_id'] || !is_numeric($_GET['pro_id'])) {
            $this->error('获取不到该商品信息');
        }
        try {
            $product = D('Product')->find($_GET['pro_id']);
            //判断抢购价
            $product['price'] = D('Product')->isRushingById($_GET['pro_id']);
            $this->assign('product', $product);
            $this->display();
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    public function confirmationInfo()
    {
        $this->title = "确认信息";
        $id = (int)I('id');
        $count = (int)I('count');
        $product = D('Product')->find($id);
        //判断抢购价
        $product['price'] = D('Product')->isRushingById($id);
        //显示可用的代金券和优惠券
        $totalPrice = $product['price'] * $count;
        //代金券
        $cashCoupons = D('Coupon')->getCashCoupon($this->user['id'], $product['org_id']);
        //优惠券
        $coupons = D('Coupon')->getCouponByUser($this->user['id'], $product['org_id']);
        $this->assign('count', $count)->assign('product', $product)->assign('id', $id)->assign('totalPrice', $totalPrice);
        $this->assign('cashCoupons', $cashCoupons)->assign('coupons', $coupons);
        $this->display();
    }

    //分享记录
    public function shareRecord()
    {
        $insertData = [
            'create_time' => time(),
            'type' => 2,
            'type_id' => $_POST['pro_id'],
            'desc' => '分享商品',
            'user_id' => $this->user['id'],
        ];
        D('ShareRecord')->insert($insertData);
        return show(0, '分享成功');
    }

    //用户之间留言对话
    public function comment()
    {
        if ($_POST) {
            if (!$_POST['product_id'] || empty($_POST['product_id'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => 'ID参数错误'));
            }
            if (!$_POST['father_id'] || empty($_POST['father_id'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => 'FATHER_ID参数错误'));
            }
            if (!$_POST['content'] || empty($_POST['content'])) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '咨询内容不能为空'));
            }
            $data = [
                'user_id' => $this->user['id'],
                'father_id' => $_POST['father_id'],
                'product_id' => $_POST['product_id'],
                'content' => $_POST['content'],
                'token' => $this->token,
                'type_id' => $_POST['type_id'],
                'status' => 1,
                'type' => 1,
                'create_time' => time()
            ];
            $id = D('ProductComment')->insert($data);
            //评论人头像
            $reply = D('ProductComment')->find($id);
            $headImg = M('user')->where("id={$reply['user_id']}")->field('headimgurl')->find();
            $reply['headImg'] = $headImg['headimgurl'];
            //被评论人头像
            $replys = D('ProductComment')->find($_POST['father_id']);
            $headImgs = M('user')->where("id={$replys['user_id']}")->field('headimgurl')->find();
            $reply['headImgs'] = $headImgs['headimgurl'];
            if (!$reply || empty($reply)) {
                $this->ajaxReturn(array('status' => 0, 'msg' => '评论失败'));
            }
            $this->ajaxReturn(array('status' => 1, 'msg' => '评论成功', 'data' => $reply));
        }
    }

    public function getClassTable()
    {
        $this->display();
    }

    public function getClassTableAjax()
    {
        if (!$_POST['pro_id']) {
            return show(0, '课程ID参数错误');
        }
        $product = D('Product')->find($_POST['pro_id']);
        $classTime = json_decode($product['class_time'], true);
        $bookTime = json_decode($product['book_time'], true);
        if (!$_POST['start_date']) {
            $differDays = date('w', time());
            $startTime = time() - 86400 * $differDays;
        } else {
            $startTime = $_POST['start_date'];
        }
        $weekArray = [
            ['day' => '周日', 'year' => date("Y", $startTime), "month" => date("m", $startTime), 'date' => date("d", $startTime)],
            ['day' => '周一', 'year' => date("Y", $startTime + 86400), "month" => date("m", $startTime + 86400), 'date' => date("d", $startTime + 86400)],
            ['day' => '周二', 'year' => date("Y", $startTime + 86400 * 2), "month" => date("m", $startTime + 86400 * 2), 'date' => date("d", $startTime + 86400 * 2)],
            ['day' => '周三', 'year' => date("Y", $startTime + 86400 * 3), "month" => date("m", $startTime + 86400 * 3), 'date' => date("d", $startTime + 86400 * 3)],
            ['day' => '周四', 'year' => date("Y", $startTime + 86400 * 4), "month" => date("m", $startTime + 86400 * 4), 'date' => date("d", $startTime + 86400 * 4)],
            ['day' => '周五', 'year' => date("Y", $startTime + 86400 * 5), "month" => date("m", $startTime + 86400 * 5), 'date' => date("d", $startTime + 86400 * 5)],
            ['day' => '周六', 'year' => date("Y", $startTime + 86400 * 6), "month" => date("m", $startTime + 86400 * 6), 'date' => date("d", $startTime + 86400 * 6)],
        ];
        foreach ($weekArray as $key => $val) {
            foreach ($classTime as $k => $v) {
                if ($val['day'] == $v['class_time_day']) {
                    $weekArray[$key]['class_time'][] = $v;
                }
            }
            foreach ($bookTime as $ke => $va) {
                if ($val['day'] == $va['book_time_day']) {
                    $weekArray[$key]['book_time'][] = $va;
                }
            }
        }
        $header = [
            'start_date' => date("m-d", $startTime),
            'end_date' => date("m-d", strtotime("+6 day", $startTime)),
        ];
        $data = [
            'header' => $header,
            'weekArray' => $weekArray
        ];
        return show(1, '', $data);
    }

    public function getBookTimeByDay()
    {
        if (!$_POST['pro_id']) {
            return show(0, '商品ID不能为空');
        }
        if (!$_POST['time']) {
            return show(0, '日期参数有误');
        }
        $bookTime = M('product')->where("id={$_POST['pro_id']}")->getField('book_time');
        $weekArray = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
        $day = $weekArray[date('w', $_POST['time'])];
        $bookTime = json_decode($bookTime, true);
        $canBookTime = [];
        foreach ($bookTime as $key => $val) {
            if ($val['book_time_day'] == $day) {
                $canBookTime[] = [
                    'start_time' => $val['book_start_hour'],
                    'end_time' => $val['book_end_hour'],
                ];
            }
        }
        $canBook['book_time'] = $canBookTime;
        if (empty($canBookTime)) {
            return show(0, '无可预约时间');
        }
        return show(1, '', $canBook);
    }

    public function getBookReadRecord()
    {
        if (!$_POST['pro_id']) {
            return show(0, '商品ID不能为空');
        }
        if (!$_POST['name']) {
            return show(0, '姓名不能为空');
        }
        if (!$_POST['tel']) {
            return show(0, '手机号不能为空');
        }
        $token = M('product')->where(array('id' => $_POST['pro_id']))->getField('token');
        $data = [
            'create_time' => time(),
            'type' => 1,
            'type_id' => $_POST['pro_id'],
            'user_id' => $this->user['id'],
            'name' => $_POST['name'],
            'mobile' => $_POST['tel'],
            'status' => 1,
            'token' => $token,
            'start_time' => strtotime($_POST['year'].'-'.$_POST['month'].'-'.$_POST['date'].' '.$_POST['start_time']),
            'end_time' => strtotime($_POST['year'].'-'.$_POST['month'].'-'.$_POST['date'].' '.$_POST['end_time']),
            'is_read' => 1
        ];
        //判断是否有预约记录
        $isBook = M('BookRecord')->where(array('type' => 1, 'type_id' => $_POST['pro_id'], 'user_id' => $this->user['id']))->find();
        if ($isBook) {
            if ($isBook['status'] != 4) {
                if ($isBook['count'] < 3) {
                    $data['count'] = $isBook['count'] + 1;
                    $id = D('BookRecord')->updateById($isBook['id'], $data);
                    if ($id) {
                        $this->sendMsgToOrgBook($isBook['id']);
                        return show(1, '为您更新了预约');
                    } else {
                        return show(0, '您之前预约过此课程了呢');
                    }
                } else {
                    return show(0, '您预约修改的次数太多，请联系管理员');
                }
            } else {
                return show(0, '预约失败');
            }
        } else {
            //没预约就提交数据
            $recordId = D('BookRecord')->insert($data);
            if ($recordId) {
                $sms = $this->sendMsgToOrg($recordId);
                if ($sms) {
                    return show(1, '预约成功');
                }
            } else {
                return show(0, '预约失败');
            }
        }
    }

    //向机构管理员发送信息通知
    public function sendMsgToOrg($bookId)
    {
        $bookClass = D('BookRecord')->find($bookId);
        $proTitle = M('product')->where(array('id' => $bookClass['type_id']))->getField('title');
        $orgId = M('organization')->where(array('token' => $bookClass['token']))->getField('id');
        $orgName = M('organization')->where(array('token' => $bookClass['token']))->getField('org_name');
        $orgMobile = M('admin_user')->where(array('org_id' => $orgId, 'mobile' => array(array('exp', 'is not null'), array('neq', 0), 'and')))->getField('mobile');
        $sms = new \ChuanglanSmsApi();
        $msg = '{$var} 您好，您在优培圈上架的课程 {$var} 有家长预约上课了，请及时登录后台跟进！';
        $params = "{$orgMobile},{$orgName},{$proTitle}";
        $result = $sms->sendVariableSMS($msg, $params);
        $recordData = [
            'create_time' => time(),
            'content' => "{$orgName}您好，您在优培圈上架的课程 {$proTitle} 有家长预约上课了，请及时登录后台跟进！",
            'type' => 3,
            'type_id' => $bookClass['id'],
            'mobile' => $orgMobile
        ];
        if (!is_null(json_decode($result))) {
            $output = json_decode($result, true);
            if (isset($output['code']) && $output['code'] == '0') {
                $recordData['status'] = 2;
                $recordData['err_code'] = $output['code'];
                return D('SmsRecord')->insert($recordData);
            } else {
                $recordData['status'] = 3;
                $recordData['err_code'] = $output['code'];
                $recordData['err_msg'] = $output['errorMsg'];
                return D('SmsRecord')->insert($recordData);
            }
        } else {
            $recordData['status'] = 3;
            $recordData['err_code'] = 'undefined';
            $recordData['err_msg'] = '发送失败';
            return D('SmsRecord')->insert($recordData);
        }
    }

    //向机构管理员发送信息通知
    public function sendMsgToOrgBook($bookId)
    {
        $bookClass = D('BookRecord')->find($bookId);
        $proTitle = M('product')->where(array('id' => $bookClass['type_id']))->getField('title');
        $orgId = M('organization')->where(array('token' => $bookClass['token']))->getField('id');
        $orgName = M('organization')->where(array('token' => $bookClass['token']))->getField('org_name');
        $orgMobile = M('admin_user')->where(array('org_id' => $orgId, 'mobile' => array(array('exp', 'is not null'), array('neq', 0), 'and')))->getField('mobile');
        $sms = new \ChuanglanSmsApi();
        $msg = '{$var} 您好，您的课程 {$var} 有家长更改了预约时间，请及时登录后台跟进！';
        $params = "{$orgMobile},{$orgName},{$proTitle}";
        $result = $sms->sendVariableSMS($msg, $params);
        $recordData = [
            'create_time' => time(),
            'content' => "{$orgName}您好，您的课程 {$proTitle} 有家长更改了预约时间，请及时登录后台跟进！",
            'type' => 3,
            'type_id' => $bookClass['id'],
            'mobile' => $orgMobile
        ];
        if (!is_null(json_decode($result))) {
            $output = json_decode($result, true);
            if (isset($output['code']) && $output['code'] == '0') {
                $recordData['status'] = 2;
                $recordData['err_code'] = $output['code'];
                return D('SmsRecord')->insert($recordData);
            } else {
                $recordData['status'] = 3;
                $recordData['err_code'] = $output['code'];
                $recordData['err_msg'] = $output['errorMsg'];
                return D('SmsRecord')->insert($recordData);
            }
        } else {
            $recordData['status'] = 3;
            $recordData['err_code'] = 'undefined';
            $recordData['err_msg'] = '发送失败';
            return D('SmsRecord')->insert($recordData);
        }
    }


}