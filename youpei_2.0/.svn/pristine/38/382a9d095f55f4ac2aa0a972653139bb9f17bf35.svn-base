<?php
namespace Home\Controller;

use Think\Controller;

class IndexController extends BaseController
{
    public function index()
    {
        $this->display();
    }

    public function play()
    {
        $this->display();
    }

    public function ajaxIndex()
    {
        //轮播图
        $picture = D('Picture')->getList();
        //首页分类
        $homeClass = D('Homeclassify')->getHomec();
        //限时抢购
        $typeIds = M('Bargain')->distinct(true)->field('type_id')->where(array('type' => 2, 'start_time' =>
            array('elt', time()), 'end_time' => array('gt', time())))->limit(4)->select();
        $rushList = [];
        if (!empty($typeIds)) {
            foreach ($typeIds as $key => $val) {
                $rushList[$key] = M('Bargain')->where(array('type' => 2, 'type_id' => $val['type_id'],
                    'start_time' => array('elt', time()), 'end_time' => array('gt', time())))->find();
            }
        }
        if (empty($rushList)) {// 如果没有抢购的话就显示普通课程
            $limitBuy = D('Product')->getSaleList(1, 3, "id,title,f_title,pic_url,type,price,status,tag,is_hot,city,area,address");
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = reset($price)['original_price'];
                $limitBuy[$k]['now_price'] = reset($price)['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
                $limitBuy[$k]['key'] = 0;
            }
        } else {
            $limitBuy = [];
            foreach ($rushList as $key => $v) {
                $limitBuy[$key] = M('Product')->field("id,title,f_title,pic_url,type,
                price,status,tag,is_hot,city,area,address")->where(['id' => $v['type_id']])->find();
                $limitBuy[$key]['key'] = $v['key'];
                $limitBuy[$key]['now_price'] = $v['price'];
                $limitBuy[$key]['end_time'] = $v['end_time'];
            }
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = $price[$v['key']]['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
            }
        }
        //精选商品分类
        $siftsClass = M('product_class')->where(array('type' => 2))->order('sort asc')->limit(0, 3)->select();
        foreach ($siftsClass as $l => $i) {
            $siftsClass[$l]['siftsProduct'] = M('product')->field("id,title,f_title,pic_url,type,price,status,tag,is_hot")
                ->where(array("type" => 2, 'is_hot' => 2, 'check_status' => 2, 'class_id' => $i['id'], 'status' => 1))->order('sort desc')->limit(4)->select();
            //精选商品
            foreach ($siftsClass[$l]['siftsProduct'] as $k => $v) {
                $tags = explode(' ', $v['tag']);
                $siftsClass[$l]['siftsProduct'][$k]['tagA'] = $tags[0] ?: '';
                $siftsClass[$l]['siftsProduct'][$k]['tagB'] = $tags[1] ?: '';
                $siftsClass[$l]['siftsProduct'][$k]['tagC'] = $tags[2] ?: '';
                $price = json_decode($v['price'], true);
                $siftsClass[$l]['siftsProduct'][$k]['original_price'] = reset($price)['original_price'];
                $siftsClass[$l]['siftsProduct'][$k]['now_price'] = reset($price)['now_price'];
                $siftsClass[$l]['siftsProduct'][$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
            }
        }
        return show(1, '', ['picture' => $picture, 'homeClass' => $homeClass, 'limitBuy' => $limitBuy,
            'siftsClass' => $siftsClass]);
    }

    public function getGroupProduct()
    {
        if (!isset($_GET['page'])) {
            return show(0, '分页数据不能为空');
        }
        //加载课程分类
        $list = M('product_class')->where(array('type' => 1))->order('sort desc')->limit($_GET['page'], 1)->select();
        if (!$list) {
            return show(0, '没有更多了');
        }
        $productList = [];
        foreach ($list as $k => $v) {
            //文章
            $article[$k] = M('article')->where(array('id' => $v['article_id'], 'check_status' => 2))->field('content', true)->find();
            if ($article[$k]) {
                $article[$k]['count'] = D('Comment')->getCountByArtId($article[$k]['id']);
                $article[$k]['collect'] = D('Collect')->getPageByType($article[$k]['id'], 5);
            }
            $productList[$k]['article'] = $article[$k];
            //团购课程
            $groupCurriculum[$k] = M('group_product')->where(array('class_id' => $v['id'], 'type' => 1,
                'is_show' => 1, 'check_status' => 2, 'status' => [array('eq', 1), array('eq', 2), 'or'],
                'start_time' => array('lt', time()), 'end_time' => array('gt', time())))->field('description,cost', true)
                ->order('create_time desc')->limit(2)->select();
            if ($groupCurriculum[$k]) {
                foreach ($groupCurriculum[$k] as $n => $m) {
                    $groupCurriculumCount[$n] = M('order')->where(array('group_id' => array('eq', $m['id'],
                        'status' => array(array('eq', 1), array('eq', 4), 'or'))))->sum('amount');
                    if (!$groupCurriculumCount[$n]) {
                        $groupCurriculum[$k][$n]['groupCount'] = 0;
                    } else {
                        $groupCurriculum[$k][$n]['groupCount'] = $groupCurriculumCount[$n];
                    }
                    $groupCurriculum[$k][$n]['logo'] = M('organization')->where(array('token' => $m['token']))->getField('picture');
                    $groupCurriculumTag = explode(' ', $m['tag']);
                    $groupCurriculum[$k][$n]['tagA'] = $groupCurriculumTag[0] ?: '';
                    $groupCurriculum[$k][$n]['tagB'] = $groupCurriculumTag[1] ?: '';
                    $groupCurriculum[$k][$n]['tagC'] = $groupCurriculumTag[2] ?: '';
                }
            }
            $productList[$k]['groupCurriculum'] = $groupCurriculum[$k];
            //普通课程
            $product[$k] = M('product')->where(array('class_id' => $v['id'], 'check_status' => 2, 'status' => 1))
                ->field("id,title,f_title,pic_url,type,price,status,tag,token")->order('create_time desc')->find();
            if ($product[$k]) {
                $tag = explode(' ', $product[$k]['tag']);
                $product[$k]['tagA'] = $tag[0] ?: '';
                $product[$k]['tagB'] = $tag[1] ?: '';
                $product[$k]['tagC'] = $tag[2] ?: '';
                $price = json_decode($product[$k]['price'], true);
                $product[$k]['original_price'] = reset($price)['original_price'];
                $product[$k]['now_price'] = reset($price)['now_price'];
                $product[$k]['logo'] = M('organization')->where(array('token' => $product[$k]['token']))->getField('picture');
                $productList[$k]['product'] = $product[$k];
            } else {
                $productList[$k]['product'] = '';
            }
            //视频文章
            $video[$k] = M('article')->where(array('cate_id' => 10, 'check_status' => 2))->field('content', true)
                ->order('create_time desc')->limit($_GET['page'], 1)->select();
            $productList[$k]['video'] = $video[$k][0];
            //团购商品&砍价商品
            if ($_GET['page'] % 2 == 1) {
                $bargainProduct = [];
                $bargainList[$k] = M('bargain')->where(array('start_time' => array('lt', time()),
                    'end_time' => array('gt', time()), 'type' => 1, 'extra' => 2))->order('id desc')->limit($_GET['page'] - 1, 2)->select();
                if ($bargainList[$k]) {
                    foreach ($bargainList[$k] as $l => $i) {
                        $bargainProduct[$l] = M('product')->where(array('id' => $i['type_id'], 'type' => 2, 'status' => 1))
                            ->field("id,title,f_title,pic_url,type,price,status,tag,token")->find();
                        $bargainTag = explode(' ', $bargainProduct[$l]['tag']);
                        $bargainProduct[$l]['tagA'] = $bargainTag[0] ?: '';
                        $bargainProduct[$l]['tagB'] = $bargainTag[1] ?: '';
                        $prices = json_decode($bargainProduct[$l]['price'], true);
                        $bargainProduct[$l]['original_price'] = $prices[$i['key']]['original_price'];
                        $bargainProduct[$l]['now_price'] = $prices[$i['key']]['now_price'];
                        $bargainProduct[$l]['key'] = $i['key'];
                    }
                    $productList[$k]['bargain'] = $bargainProduct;
                    //如果最后一组只有一个时，调取前一组的最后一个
                    if ($productList[$k]['bargain'][0] && !$productList[$k]['bargain'][1]) {
                        $bargain[$k] = M('bargain')->where(array('start_time' => array('lt', time()),
                            'end_time' => array('gt', time()), 'type' => 1, 'extra' => 2))->order('id desc')->limit($_GET['page'] - 2, 1)->select();
                        $bargainProduct[$k] = M('product')->where(array('id' => $bargain[$k][0]['type_id'], 'type' => 2, 'status' => 1))->field('desc,cost', true)->find();
                        $bargainProduct[$k]['key'] = $bargain[$k][0]['key'];
                        $bargainTag = explode(' ', $bargainProduct[$k]['tag']);
                        $bargainProduct[$k]['tagA'] = $bargainTag[0] ?: '';
                        $bargainProduct[$k]['tagB'] = $bargainTag[1] ?: '';
                        $prices = json_decode($bargainProduct[$k]['price'], true);
                        $bargainProduct[$k]['original_price'] = $prices[$bargain[$k][0]['key']]['original_price'];
                        $bargainProduct[$k]['now_price'] = $prices[$bargain[$k][0]['key']]['now_price'];
                        $productList[$k]['bargain'][1] = $bargainProduct[$k];
                    }
                } else {
                    $productList[$k]['bargain'] = [];
                }
            } else {
                $groupProducts[$k] = M('group_product')->where(array('type' => 2, 'is_show' => 1, 'check_status' => 2,
                    'start_time' => array('lt', time()), 'end_time' => array('gt', time()),
                    'status' => [array('eq', 1), array('eq', 2), 'or']))->field('description,cost', true)
                    ->order('create_time desc')->limit($_GET['page'], 2)->select();
                if ($groupProducts[$k]) {
                    foreach ($groupProducts[$k] as $q => $w) {
                        $groupProductCount[$q] = M('order')->where(array('group_id' => array('eq', $w['id']),
                            'status' => [array('eq', 1), array('eq', 4), 'or']))->sum('amount');
                        if (!$groupProductCount[$q]) {
                            $groupProducts[$k][$q]['groupCount'] = 0;
                        } else {
                            $groupProducts[$k][$q]['groupCount'] = $groupProductCount[$q];
                        }
                        $groupProducts[$k][$q]['logo'] = M('organization')->where(array('token' => $w['token']))->getField('picture');
                        $groupProductTag = explode(' ', $w['tag']);
                        $groupProducts[$k][$q]['tagA'] = $groupProductTag[0] ?: '';
                        $groupProducts[$k][$q]['tagB'] = $groupProductTag[1] ?: '';
                    }
                    //如果最后一组只有一个时，调取前一组的最后一个
                    if (count($groupProducts[$k]) == 1 && $_GET['page'] != 0) {
                        $groupProduct[$k] = M('group_product')->where(array('type' => 2, 'is_show' => 1, 'check_status' => 2,
                            'start_time' => array('lt', time()), 'end_time' => array('gt', time()),
                            'status' => [array('eq', 1), array('eq', 2), 'or']))->field('description,cost', true)
                            ->order('create_time desc')->limit($_GET['page'] - 1, 1)->select();
                        $groupProductCount[$k] = M('order')->where(array('group_id' => array('eq', $groupProduct[$k][0]['id']),
                            'status' => [array('eq', 1), array('eq', 4), 'or']))->sum('amount');
                        if (!$groupProductCount[$k]) {
                            $groupProduct[$k][0]['groupCount'] = 0;
                        } else {
                            $groupProduct[$k][0]['groupCount'] = $groupProductCount[$k];
                        }
                        $groupProduct[$k][0]['logo'] = M('organization')->where(array('token' => $groupProduct[$k][0]['token']))->getField('picture');
                        $groupProductTag = explode(' ', $groupProduct[$k][0]['tag']);
                        $groupProduct[$k][0]['tagA'] = $groupProductTag[0] ?: '';
                        $groupProduct[$k][0]['tagB'] = $groupProductTag[1] ?: '';
                        $groupProducts[$k][1] = $groupProduct[$k][0];
                    }
                }
                $productList[$k]['groupProduct'] = $groupProducts[$k];
            }
        }
        return show(1, '', $productList);
    }


    public function search()
    {
        $tags = M('config')->where("token='{$this->token}'")->getField('search_tag');
        $searchTags = explode(' ', $tags);
        $searchHistory = D('SearchRecord')->getHistory($this->user['id']);
        $this->assign('searchTags', $searchTags)->assign('searchHistory', $searchHistory);
        $this->display();
    }

    public function searchResult()
    {
        if (!$_GET['type'] || empty($_GET['type'])) {  //type 1:文章 2:课程 3:商品 4:机构
            $this->error('搜索类型错误');
        };
        if (!$_GET['word'] || empty($_GET['word'])) {
            $this->error('搜索内容不能为空');
        }
        //添加到搜索记录表
        $isRecord = D('SearchRecord')->isRecordByWord($this->user['id'], $_GET['word']);
        if ($isRecord) {
            D('SearchRecord')->updateById($isRecord, array("create_time" => time()));
        } else {
            $recordData = [
                "user_id" => $this->user['id'],
                'word' => $_GET['word'],
                'create_time' => time(),
                'type' => $_GET['type'],
            ];
            D('SearchRecord')->insert($recordData);
            //判断记录有否超过7条，删除最后一条
            D('SearchRecord')->deleteLastRecord($this->user['id']);
        }
        switch ($_GET['type']) {
            case 1:
                $result = M('article')->order('create_time desc')->where(array("title" => array('like', "%{$_GET['word']}%"), 'status' => 2))->field('content', true)->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 1;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            case 2:
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_GET['word']}%"), 'type' => 1, 'status' => 1, 'check_status' => 2))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 2;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                    $price = json_decode($v['price'], true);
                    $result[$k]['original_price'] = reset($price)['original_price'];
                    $result[$k]['now_price'] = reset($price)['now_price'];
                }
                break;
            case 3:
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_GET['word']}%"), 'type' => 2, 'status' => 1, 'check_status' => 2))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 3;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                    $price = json_decode($v['price'], true);
                    $result[$k]['original_price'] = reset($price)['original_price'];
                    $result[$k]['now_price'] = reset($price)['now_price'];
                }
                break;
            case 4:
                $result = M('organization')->order('create_time desc')->where(array('org_name' => array('like', "%{$_GET['word']}%")))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 4;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            default:
                $result = false;
        }
        $this->assign('result', $result)->assign('type', $_GET['type']);
        $this->display();
    }

    public function clearHistory()
    {
        D('SearchRecord')->deleteByUserId($this->user['id']);
        $this->ajaxReturn(array('status' => 1, 'msg' => '清除成功'));
    }

    public function loadingSearch()
    {
        $npage = (int)I('npage');
        switch ($_POST['type']) {
            case 1;
                $result = M('article')->order('create_time desc')->where(array("title" => array('like', "%{$_POST['word']}%"), 'status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 1;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            case 2;
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_POST['word']}%"), 'type' => 1, 'status' => 1, 'check_status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 2;
                    $result[$k]['time'] = date('Y年m月d日', $v['start_time']);
                }
                break;
            case 3;
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_POST['word']}%"), 'type' => 2, 'status' => 1, 'check_status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 3;
                    $result[$k]['time'] = date('Y年m月d日', $v['start_time']);
                }
                break;
            case 4;
                $result = M('organization')->order('create_time desc')->where(array('org_name' => array('like', "%{$_POST['word']}%")))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 4;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
        }
        if (!isset($result) || empty($result)) {
            $this->ajaxReturn(array('status' => 0, 'msg' => '没有数据'));
        }
        $this->ajaxReturn(array('status' => 1, 'msg' => '获取成功', 'data' => $result));
    }
}