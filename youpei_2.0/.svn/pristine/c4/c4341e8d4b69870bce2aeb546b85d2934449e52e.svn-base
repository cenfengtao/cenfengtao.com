<?php
namespace Home\Controller;

use Think\Controller;

class IndexController extends BaseController
{
    public function home()
    {
        $this->display();
    }
    public function indexCopy()
    {
        $this->display();
    }
    public function index()
    {
        //轮播图
        $picture = D('Picture')->getList();
        //首页分类
        $Homec = D('Homeclassify')->getHomec();
        //商品分类
        $Homep = D('ProductClass')->getProductClass();
        $cid = (int)I('cid', 1);
        $this->assign('cid', $cid);
        $this->assign('picture', $picture);
        $this->assign('Homec', $Homec);
        $this->assign('Homep', $Homep);
        $current = (int)I('current', 1);
        $this->assign('current', $current);
        //限时抢购
        $typeIds = M('Bargain')->distinct(true)->field('type_id')->where(array('type' => 2, 'start_time' =>
            array('elt', time()), 'end_time' => array('gt', time())))->limit(4)->select();
        $rushList = [];
        if (!empty($typeIds)) {
            foreach ($typeIds as $key => $val) {
                $rushList[$key] = M('Bargain')->where(array('type' => 2, 'type_id' => $val['type_id'],
                    'start_time' => array('elt', time()), 'end_time' => array('gt', time())))->find();
            }
        }
        if (empty($rushList)) {// 如果没有抢购的话就显示普通课程
            $limitBuy = D('Product')->getSaleList(1, 4, "id,title,f_title,pic_url,type,price,status,tag,is_hot,city,area,address");
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = reset($price)['original_price'];
                $limitBuy[$k]['now_price'] = reset($price)['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
                $limitBuy[$k]['key'] = 0;
            }
        } else {
            $limitBuy = [];
            foreach ($rushList as $key => $v) {
                $limitBuy[$key] = M('Product')->field("id,title,f_title,pic_url,type,
                price,status,tag,is_hot,city,area,address")->where(['id' => $v['type_id']])->find();
                $limitBuy[$key]['key'] = $v['key'];
                $limitBuy[$key]['now_price'] = $v['price'];
                $limitBuy[$key]['end_time'] = $v['end_time'];
            }
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = $price[$v['key']]['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
            }
        }
        $this->assign('limitBuy', $limitBuy);
        //精选商品
        $sifts = M('product')->field("id,title,f_title,pic_url,type,price,status,tag,is_hot")
            ->where(array("type" => 2, 'is_hot' => 2, 'check_status' => 2))->order('id desc')->limit(5)->select();
        foreach ($sifts as $k => $v) {
            $price = json_decode($v['price'], true);
            $sifts[$k]['original_price'] = reset($price)['original_price'];
            $sifts[$k]['now_price'] = reset($price)['now_price'];
            $sifts[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
        }
        $this->assign('sifts', $sifts);
        //团购商品
        //先把过期的团购修改状态
        M('group_record')->where(array('status' => array('neq', 5), 'end_time' => array('ELT', time())))
            ->save(array('status' => 2));
        $groupList = M('group_record')->where(array('status' => array('neq', 5), 'end_time' => array('gt', time())))->select();
        foreach ($groupList as $k => $v) {
            $userCount = M('order')->where(array('group_record_id' => $v['id'],
                'status' => array(array('eq', 1), array('eq', 4), 'OR')))->count('amount');
            $product = D('GroupProduct')->find($v['group_id']);
            if ($userCount >= $product['min_people']) {
                D('GroupRecord')->updateById($v['id'], array('status' => 2));
            }
            if ($userCount >= $product['max_people']) {
                D('GroupRecord')->updateById($v['id'], array('status' => 4));
            }
            $groupList[$k]['title'] = $product['title'];
            $groupList[$k]['original_price'] = $product['original_price'];
            $groupList[$k]['price'] = $product['price'];
            $groupList[$k]['min_people'] = $product['min_people'];
            $groupList[$k]['image'] = $product['image'];
        }
        $this->assign('groupList', $groupList);
        $this->display();
    }

    public function indexTest()
    {
        //轮播图
        $picture = D('Picture')->getList();
        //首页分类
        $Homec = D('Homeclassify')->getHomec();
        //商品分类
        $Homep = D('ProductClass')->getProductClass();
        $cid = (int)I('cid', 1);
        $this->assign('cid', $cid);
        $this->assign('picture', $picture);
        $this->assign('Homec', $Homec);
        $this->assign('Homep', $Homep);
        $current = (int)I('current', 1);
        $this->assign('current', $current);
        //限时抢购
        $typeIds = M('Bargain')->distinct(true)->field('type_id')->where(array('type' => 2, 'start_time' =>
            array('elt', time()), 'end_time' => array('gt', time())))->limit(4)->select();
        $rushList = [];
        if (!empty($typeIds)) {
            foreach ($typeIds as $key => $val) {
                $rushList[$key] = M('Bargain')->where(array('type' => 2, 'type_id' => $val['type_id'],
                    'start_time' => array('elt', time()), 'end_time' => array('gt', time())))->find();
            }
        }
        if (!$rushList) {// 如果没有抢购的话就显示普通课程
            $limitBuy = D('Product')->getSaleList(1, 4, "id,title,f_title,pic_url,type,price,status,tag,is_hot");
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = reset($price)['original_price'];
                $limitBuy[$k]['now_price'] = reset($price)['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
            }
        } else {
            $limitBuy = [];
            foreach ($rushList as $key => $v) {
                $limitBuy[$key] = M('Product')->field("id,title,f_title,pic_url,type,
                price,status,tag,is_hot")->where(['id' => $v['type_id']])->find();
                $limitBuy[$key]['key'] = $v['key'];
                $limitBuy[$key]['now_price'] = $v['price'];
            }
            foreach ($limitBuy as $k => $v) {
                $price = json_decode($v['price'], true);
                $limitBuy[$k]['original_price'] = $price[$v['key']]['now_price'];
                $limitBuy[$k]['now_price'] = $v['now_price'];
                $limitBuy[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
                $tags = explode(' ', $v['tag']);
                $limitBuy[$k]['tagA'] = $tags[0] ?: '';
                $limitBuy[$k]['tagB'] = $tags[1] ?: '';
                $limitBuy[$k]['tagC'] = $tags[2] ?: '';
                $limitBuy[$k]['title'] = mb_substr($limitBuy[$k]['title'], 0, 10);
            }
        }
        //精选商品
        $sifts = M('product')->field("id,title,f_title,pic_url,type,price,status,tag,is_hot")
            ->where(array("type" => 2, 'is_hot' => 2, 'check_status' => 2))->order('id desc')->limit(5)->select();
        foreach ($sifts as $k => $v) {
            $price = json_decode($v['price'], true);
            $sifts[$k]['original_price'] = reset($price)['original_price'];
            $sifts[$k]['now_price'] = reset($price)['now_price'];
            $sifts[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
        }
        $data = [
            'cid' => $cid,
            'picture' => $picture,
            'Homec' => $Homec,
            'Homep' => $Homep,
            'current' => $current,
            'limitBuy' => $limitBuy,
            'sifts' => $sifts
        ];
        return show(0, '', $data);
    }

    //根据课程分类显示内容
    public function getProductByType()
    {
        if ($_POST['id'] == 0 || empty($_POST['id'])) { //热门
            $list = M('product')->field("desc,cost", true)
                ->where(array('is_hot' => 1, 'status' => 1, 'check_status' => 2, 'is_fire' => 2))
                ->field('id,title,pic_url,tag,class_id,org_id,f_title')->order('sort desc,create_time desc')->limit(3)->select();
        } elseif ($_POST['id'] == -1) { //砍价
            $bargainList = M('bargain')->where(['type' => 1, 'start_time' => ['lt', time()], 'end_time' => ['gt', time()]])->limit(3)->select();
            $list = [];
            foreach ($bargainList as $k => $v) {
                $list[$k] = M('product')->field('id,title,pic_url,tag,class_id,org_id,f_title')->where("id={$v['type_id']}")->find();
                $list[$k]['key'] = $v['key'];
            }
        } else {
            $list = M('product')->field('id,title,pic_url,tag,class_id,org_id,f_title')
                ->where(array('class_id' => $_POST['id'], 'status' => 1, 'check_status' => 2))->order('sort desc,create_time desc')->limit(3)->select();
        }
        if (!$list || empty($list)) {
            $this->ajaxReturn(array('status' => 0, 'msg' => '没有数据'));
        }
        foreach ($list as $k => $v) {
            $tags = explode(' ', $v['tag']);
            $list[$k]['tagA'] = $tags[0] ?: '';
            $list[$k]['tagB'] = $tags[1] ?: '';
            $list[$k]['tagC'] = $tags[2] ?: '';
            $list[$k]['class_title'] = D('ProductClass')->getTitleById($v['class_id']);
            $list[$k]['image'] = D('Organization')->getImageById($v['org_id']);
            $org[$k] = M('organization')->where(array('id'=>$v['org_id']))->find();
            $list[$k]['address'] = $org[$k]['city'].$org[$k]['area'].$org[$k]['address'];
            $list[$k]['price'] = D('Product')->getFirstKeyPrice($v['id']);
            $list[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
            //是否砍价
            $isBargain = D('Bargain')->isBargain($v['id'], $v['key']);
            if ($isBargain) {
                $isBargain = 2;
            } else {
                $isBargain = 1;
            }
            $list[$k]['bargain'] = $isBargain;
        }
        $this->ajaxReturn(array('status' => 1, 'msg' => '获取成功', 'data' => $list));
    }

    public function loadingProduct()
    {
        $npage = (int)I("npage");
        $class_id = (int)I("first_class_id");
        if ($class_id == 0) { //热门
            $list = M('product')->field("desc,cost", true)
                ->where(array('type' => 1, 'status' => 1, 'check_status' => 2, 'is_fire' => 2))->order('sort desc,create_time desc')
                ->limit($npage, 3)->select();
        } elseif ($class_id == -1) { //砍价
            $bargainList = M('bargain')->where(['type' => 1, 'start_time' => ['lt', time()], 'end_time' => ['gt', time()]])->limit($npage, 3)->select();
            $list = [];
            foreach ($bargainList as $k => $v) {
                $list[$k] = M('product')->field('desc,cost', true)->where("id={$v['type_id']}")->find();
                $list[$k]['key'] = $v['key'];
            }
        } else {
            $list = M('product')->field("desc,cost", true)
                ->where(array('status' => 1, 'class_id' => $class_id, 'check_status' => 2))->order('sort desc,create_time desc')
                ->limit($npage, 3)->select();
        }
        if (!$list || empty($list)) {
            $this->ajaxReturn(array('status' => 0, 'msg' => '没有数据'));
        }
        foreach ($list as $k => $v) {
            $tags = explode(' ', $v['tag']);
            $list[$k]['tagA'] = $tags[0] ?: '';
            $list[$k]['tagB'] = $tags[1] ?: '';
            $list[$k]['tagC'] = $tags[2] ?: '';
            $list[$k]['class_title'] = D('ProductClass')->getTitleById($v['class_id']);
            $org[$k] = M('organization')->where(array('id'=>$v['org_id']))->find();
            $list[$k]['address'] = $org[$k]['city'].$org[$k]['area'].$org[$k]['address'];
            $list[$k]['image'] = D('Organization')->getImageById($v['org_id']);
            $list[$k]['price'] = D('Product')->getFirstKeyPrice($v['id']);
            $list[$k]['thumb_image'] = str_replace('.', '_thumb.', $v['pic_url']);
            //是否砍价
            $isBargain = D('Bargain')->isBargain($v['id'], $v['key']);
            if ($isBargain) {
                $isBargain = 2;
            } else {
                $isBargain = 1;
            }
            $list[$k]['bargain'] = $isBargain;
        }
        $this->ajaxReturn(array('status' => 1, 'msg' => '获取成功', 'data' => $list));
    }

    public function search()
    {
        $tags = M('config')->where("token='{$this->token}'")->getField('search_tag');
        $searchTags = explode(' ', $tags);
        $searchHistory = D('SearchRecord')->getHistory($this->user['id']);
        $this->assign('searchTags', $searchTags)->assign('searchHistory', $searchHistory);
        $this->display();
    }

    public function searchResult()
    {
        if (!$_GET['type'] || empty($_GET['type'])) {  //type 1:文章 2:课程 3:商品 4:机构
            $this->error('搜索类型错误');
        };
        if (!$_GET['word'] || empty($_GET['word'])) {
            $this->error('搜索内容不能为空');
        }
        //添加到搜索记录表
        $isRecord = D('SearchRecord')->isRecordByWord($this->user['id'], $_GET['word']);
        if ($isRecord) {
            D('SearchRecord')->updateById($isRecord, array("create_time" => time()));
        } else {
            $recordData = [
                "user_id" => $this->user['id'],
                'word' => $_GET['word'],
                'create_time' => time(),
                'type' => $_GET['type'],
            ];
            D('SearchRecord')->insert($recordData);
            //判断记录有否超过7条，删除最后一条
            D('SearchRecord')->deleteLastRecord($this->user['id']);
        }
        switch ($_GET['type']) {
            case 1:
                $result = M('article')->order('create_time desc')->where(array("title" => array('like', "%{$_GET['word']}%"), 'status' => 2))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 1;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            case 2:
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_GET['word']}%"), 'type' => 1, 'status' => 1, 'check_status' => 2))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 2;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                    $price = json_decode($v['price'], true);
                    $result[$k]['original_price'] = reset($price)['original_price'];
                    $result[$k]['now_price'] = reset($price)['now_price'];
                }
                break;
            case 3:
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_GET['word']}%"), 'type' => 2, 'status' => 1, 'check_status' => 2))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 3;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                    $price = json_decode($v['price'], true);
                    $result[$k]['original_price'] = reset($price)['original_price'];
                    $result[$k]['now_price'] = reset($price)['now_price'];
                }
                break;
            case 4:
                $result = M('organization')->order('create_time desc')->where(array('org_name' => array('like', "%{$_GET['word']}%")))->limit(0, 10)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 4;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            default:
                $result = false;
        }
        $this->assign('result', $result)->assign('type', $_GET['type']);
        $this->display();
    }

    public function clearHistory()
    {
        D('SearchRecord')->deleteByUserId($this->user['id']);
        $this->ajaxReturn(array('status' => 1, 'msg' => '清除成功'));
    }

    public function loadingSearch()
    {
        $npage = (int)I('npage');
        switch ($_POST['type']) {
            case 1;
                $result = M('article')->order('create_time desc')->where(array("title" => array('like', "%{$_POST['word']}%"), 'status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 1;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
            case 2;
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_POST['word']}%"), 'type' => 1, 'status' => 1, 'check_status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 2;
                    $result[$k]['time'] = date('Y年m月d日', $v['start_time']);
                }
                break;
            case 3;
                $result = M('product')->order('start_time desc')->where(array('title' => array('like', "%{$_POST['word']}%"), 'type' => 2, 'status' => 1, 'check_status' => 2))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 3;
                    $result[$k]['time'] = date('Y年m月d日', $v['start_time']);
                }
                break;
            case 4;
                $result = M('organization')->order('create_time desc')->where(array('org_name' => array('like', "%{$_POST['word']}%")))->limit($npage, 6)->select();
                foreach ($result as $k => $v) {
                    $result[$k]['search_type'] = 4;
                    $result[$k]['time'] = date('Y年m月d日', $v['create_time']);
                }
                break;
        }
        if (!isset($result) || empty($result)) {
            $this->ajaxReturn(array('status' => 0, 'msg' => '没有数据'));
        }
        $this->ajaxReturn(array('status' => 1, 'msg' => '获取成功', 'data' => $result));
    }

    public function study()
    {
        $this->display();
    }
}